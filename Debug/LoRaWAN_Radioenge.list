
LoRaWAN_Radioenge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004614  08004614  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800461c  0800461c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08004624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000010c  08004730  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004730  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf9b  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b16  00000000  00000000  0002c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198dd  00000000  00000000  0002f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c704  00000000  00000000  000489fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3ef  00000000  00000000  00055101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f44f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  000f4540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800413c 	.word	0x0800413c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	0800413c 	.word	0x0800413c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000588:	f3bf 8f4f 	dsb	sy
}
 800058c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <__NVIC_SystemReset+0x24>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000596:	4904      	ldr	r1, [pc, #16]	; (80005a8 <__NVIC_SystemReset+0x24>)
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_SystemReset+0x28>)
 800059a:	4313      	orrs	r3, r2
 800059c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <__NVIC_SystemReset+0x20>
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	05fa0004 	.word	0x05fa0004

080005b0 <UART_WriteString>:
    while (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)) {
        HAL_UART_Receive(huart, &dummyData, 1, HAL_MAX_DELAY);
    }
}

void UART_WriteString(UART_HandleTypeDef *huart, char *val){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	uint32_t len_val = strlen(val);
 80005ba:	6838      	ldr	r0, [r7, #0]
 80005bc:	f7ff fe08 	bl	80001d0 <strlen>
 80005c0:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)val, len_val, HAL_MAX_DELAY);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	6839      	ldr	r1, [r7, #0]
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f002 fad9 	bl	8002b84 <HAL_UART_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <UART_ReadString>:

char* UART_ReadString(UART_HandleTypeDef *huart){
 80005dc:	b580      	push	{r7, lr}
 80005de:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80005e8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80005ec:	6018      	str	r0, [r3, #0]
	uint8_t received_data = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
	uint8_t buffer_pData[1024];
	uint32_t count = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	static uint8_t count_err = 0;

	while(1){
		int response = HAL_UART_Receive(huart, &received_data, 1, 1000);
 80005fa:	f207 410b 	addw	r1, r7, #1035	; 0x40b
 80005fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000602:	f2a3 401c 	subw	r0, r3, #1052	; 0x41c
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	2201      	movs	r2, #1
 800060c:	6800      	ldr	r0, [r0, #0]
 800060e:	f002 fb4d 	bl	8002cac <HAL_UART_Receive>
 8000612:	4603      	mov	r3, r0
 8000614:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		if(HAL_OK == response){
 8000618:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800061c:	2b00      	cmp	r3, #0
 800061e:	d13a      	bne.n	8000696 <UART_ReadString+0xba>
			if(received_data == '\n'){
 8000620:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8000624:	2b0a      	cmp	r3, #10
 8000626:	d11e      	bne.n	8000666 <UART_ReadString+0x8a>
				buffer_pData[count] = received_data;
 8000628:	f897 140b 	ldrb.w	r1, [r7, #1035]	; 0x40b
 800062c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000630:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 8000634:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
				++count;
 800063e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000642:	3301      	adds	r3, #1
 8000644:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
				break;
 8000648:	bf00      	nop
			++count_err;
			return "HAL_TIMEOUT";
		}
	}

	char* val_string = (char*)malloc(count + 1);
 800064a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800064e:	3301      	adds	r3, #1
 8000650:	4618      	mov	r0, r3
 8000652:	f003 f831 	bl	80036b8 <malloc>
 8000656:	4603      	mov	r3, r0
 8000658:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	if (val_string != NULL) {
 800065c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000660:	2b00      	cmp	r3, #0
 8000662:	d06e      	beq.n	8000742 <UART_ReadString+0x166>
 8000664:	e035      	b.n	80006d2 <UART_ReadString+0xf6>
				if(received_data != '\r'){
 8000666:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 800066a:	2b0d      	cmp	r3, #13
 800066c:	d00f      	beq.n	800068e <UART_ReadString+0xb2>
					buffer_pData[count] = received_data;
 800066e:	f897 140b 	ldrb.w	r1, [r7, #1035]	; 0x40b
 8000672:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000676:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 800067a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800067e:	4413      	add	r3, r2
 8000680:	460a      	mov	r2, r1
 8000682:	701a      	strb	r2, [r3, #0]
					++count;
 8000684:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000688:	3301      	adds	r3, #1
 800068a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			count_err = 0;
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <UART_ReadString+0x184>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e7b1      	b.n	80005fa <UART_ReadString+0x1e>
		else if(HAL_ERROR == response)
 8000696:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800069a:	2b01      	cmp	r3, #1
 800069c:	d101      	bne.n	80006a2 <UART_ReadString+0xc6>
			NVIC_SystemReset();
 800069e:	f7ff ff71 	bl	8000584 <__NVIC_SystemReset>
		else if(HAL_BUSY == response)
 80006a2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d101      	bne.n	80006ae <UART_ReadString+0xd2>
			return "HAL_BUSY";
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <UART_ReadString+0x188>)
 80006ac:	e053      	b.n	8000756 <UART_ReadString+0x17a>
		else if(HAL_TIMEOUT == response){
 80006ae:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d1a1      	bne.n	80005fa <UART_ReadString+0x1e>
			if(count_err > 3)
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <UART_ReadString+0x184>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d901      	bls.n	80006c2 <UART_ReadString+0xe6>
				NVIC_SystemReset();
 80006be:	f7ff ff61 	bl	8000584 <__NVIC_SystemReset>
			++count_err;
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <UART_ReadString+0x184>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <UART_ReadString+0x184>)
 80006cc:	701a      	strb	r2, [r3, #0]
			return "HAL_TIMEOUT";
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <UART_ReadString+0x18c>)
 80006d0:	e041      	b.n	8000756 <UART_ReadString+0x17a>
		for (uint32_t i = 0; i < count; ++i)
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80006d8:	e026      	b.n	8000728 <UART_ReadString+0x14c>
			if(buffer_pData[i] != '\n' || buffer_pData[i] != '\r')
 80006da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006de:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 80006e2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	d109      	bne.n	8000702 <UART_ReadString+0x126>
 80006ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006f2:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 80006f6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b0d      	cmp	r3, #13
 8000700:	d00d      	beq.n	800071e <UART_ReadString+0x142>
				val_string[i] = (char)buffer_pData[i];
 8000702:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000706:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800070a:	4413      	add	r3, r2
 800070c:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000710:	f5a2 6183 	sub.w	r1, r2, #1048	; 0x418
 8000714:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8000718:	440a      	add	r2, r1
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < count; ++i)
 800071e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000722:	3301      	adds	r3, #1
 8000724:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8000728:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800072c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000730:	429a      	cmp	r2, r3
 8000732:	d3d2      	bcc.n	80006da <UART_ReadString+0xfe>
	    val_string[count] = '\0';
 8000734:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000738:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800073c:	4413      	add	r3, r2
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
	}

	char* buffer_val = val_string;
 8000742:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000746:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	free(val_string);
 800074a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
 800074e:	f002 ffbb 	bl	80036c8 <free>
	return buffer_val;
 8000752:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8000756:	4618      	mov	r0, r3
 8000758:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000348 	.word	0x20000348
 8000764:	0800426c 	.word	0x0800426c
 8000768:	08004278 	.word	0x08004278

0800076c <feedbackSerial>:

char* feedbackSerial(char* val, uint8_t exception){
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  if(feedback == 1){
 8000778:	4b33      	ldr	r3, [pc, #204]	; (8000848 <feedbackSerial+0xdc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d107      	bne.n	8000790 <feedbackSerial+0x24>
	  UART_WriteString(&huart2, "TX: ");
 8000780:	4932      	ldr	r1, [pc, #200]	; (800084c <feedbackSerial+0xe0>)
 8000782:	4833      	ldr	r0, [pc, #204]	; (8000850 <feedbackSerial+0xe4>)
 8000784:	f7ff ff14 	bl	80005b0 <UART_WriteString>
	  UART_WriteString(&huart2, val);
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	4831      	ldr	r0, [pc, #196]	; (8000850 <feedbackSerial+0xe4>)
 800078c:	f7ff ff10 	bl	80005b0 <UART_WriteString>
  }

  UART_WriteString(&huart1, val);
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	4830      	ldr	r0, [pc, #192]	; (8000854 <feedbackSerial+0xe8>)
 8000794:	f7ff ff0c 	bl	80005b0 <UART_WriteString>
  char* buff;
  uint8_t count = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]

  while(1){
	  buff = UART_ReadString(&huart1);
 800079c:	482d      	ldr	r0, [pc, #180]	; (8000854 <feedbackSerial+0xe8>)
 800079e:	f7ff ff1d 	bl	80005dc <UART_ReadString>
 80007a2:	60b8      	str	r0, [r7, #8]
	  if(exception == 0){
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10a      	bne.n	80007c0 <feedbackSerial+0x54>
		  if(indexOf(buff, "E") > 0)
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <feedbackSerial+0xec>)
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	68b8      	ldr	r0, [r7, #8]
 80007b2:	f000 f901 	bl	80009b8 <indexOf>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dd28      	ble.n	800080e <feedbackSerial+0xa2>
			  return "";
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <feedbackSerial+0xf0>)
 80007be:	e03e      	b.n	800083e <feedbackSerial+0xd2>
	      break;
	  }
	  else{
		  if(indexOf(buff, "E") > 0 && count > 0)
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <feedbackSerial+0xec>)
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	68b8      	ldr	r0, [r7, #8]
 80007c8:	f000 f8f6 	bl	80009b8 <indexOf>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd06      	ble.n	80007e0 <feedbackSerial+0x74>
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <feedbackSerial+0x74>
			  count -= 1;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	3b01      	subs	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
 80007de:	e00a      	b.n	80007f6 <feedbackSerial+0x8a>
	          else if(count <= 0)
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d015      	beq.n	8000812 <feedbackSerial+0xa6>
	              break;
	          else if(buff == "AT_JOIN_OK" || buff == "AT_ALREADY_JOINED")
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <feedbackSerial+0xf4>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d012      	beq.n	8000814 <feedbackSerial+0xa8>
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <feedbackSerial+0xf8>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d00e      	beq.n	8000814 <feedbackSerial+0xa8>
	              break;
	  }
	  if(buff == "" || buff == NULL || buff == "\0")
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <feedbackSerial+0xf0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00a      	beq.n	8000814 <feedbackSerial+0xa8>
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d007      	beq.n	8000814 <feedbackSerial+0xa8>
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <feedbackSerial+0xfc>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d003      	beq.n	8000814 <feedbackSerial+0xa8>
	  buff = UART_ReadString(&huart1);
 800080c:	e7c6      	b.n	800079c <feedbackSerial+0x30>
	      break;
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <feedbackSerial+0xa8>
	              break;
 8000812:	bf00      	nop
		  break;

  }

  if(feedback == 1){
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <feedbackSerial+0xdc>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d10f      	bne.n	800083c <feedbackSerial+0xd0>
	  if(buff != ""){
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <feedbackSerial+0xf0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d007      	beq.n	8000834 <feedbackSerial+0xc8>
		  UART_WriteString(&huart2, "RX: ");
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <feedbackSerial+0x100>)
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <feedbackSerial+0xe4>)
 8000828:	f7ff fec2 	bl	80005b0 <UART_WriteString>
	  	  UART_WriteString(&huart2, buff);
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <feedbackSerial+0xe4>)
 8000830:	f7ff febe 	bl	80005b0 <UART_WriteString>
	  }

	  UART_WriteString(&huart2, "\r\n");
 8000834:	490e      	ldr	r1, [pc, #56]	; (8000870 <feedbackSerial+0x104>)
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <feedbackSerial+0xe4>)
 8000838:	f7ff feba 	bl	80005b0 <UART_WriteString>
  }
  return buff;
 800083c:	68bb      	ldr	r3, [r7, #8]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000230 	.word	0x20000230
 800084c:	08004284 	.word	0x08004284
 8000850:	200001ac 	.word	0x200001ac
 8000854:	20000128 	.word	0x20000128
 8000858:	0800428c 	.word	0x0800428c
 800085c:	08004290 	.word	0x08004290
 8000860:	08004294 	.word	0x08004294
 8000864:	080042a0 	.word	0x080042a0
 8000868:	080042b4 	.word	0x080042b4
 800086c:	080042b8 	.word	0x080042b8
 8000870:	08004268 	.word	0x08004268

08000874 <commandAT>:


char* commandAT(uint8_t cmd, char* val, uint8_t exception){
 8000874:	b580      	push	{r7, lr}
 8000876:	b0c6      	sub	sp, #280	; 0x118
 8000878:	af02      	add	r7, sp, #8
 800087a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800087e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000882:	6019      	str	r1, [r3, #0]
 8000884:	4611      	mov	r1, r2
 8000886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800088e:	4602      	mov	r2, r0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000896:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800089a:	460a      	mov	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
  char* AT = "AT+";
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <commandAT+0xf0>)
 80008a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  char* buff;

  char command[BUFFER_SIZE];

  if(exception == 0 && val == "")
 80008a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008a8:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d117      	bne.n	80008e2 <commandAT+0x6e>
 80008b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <commandAT+0xf4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d10f      	bne.n	80008e2 <commandAT+0x6e>
	  sprintf(command, "%s%s=?\r\n\0", AT, AT_CMD[cmd]);
 80008c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008c6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4a27      	ldr	r2, [pc, #156]	; (800096c <commandAT+0xf8>)
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	f107 000c 	add.w	r0, r7, #12
 80008d6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008da:	4925      	ldr	r1, [pc, #148]	; (8000970 <commandAT+0xfc>)
 80008dc:	f003 f828 	bl	8003930 <siprintf>
 80008e0:	e02c      	b.n	800093c <commandAT+0xc8>
  else if(exception == 1)
 80008e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008e6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10f      	bne.n	8000910 <commandAT+0x9c>
	  sprintf(command, "%s%s\r\n\0", AT, AT_CMD[cmd]);
 80008f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <commandAT+0xf8>)
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	f107 000c 	add.w	r0, r7, #12
 8000904:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000908:	491a      	ldr	r1, [pc, #104]	; (8000974 <commandAT+0x100>)
 800090a:	f003 f811 	bl	8003930 <siprintf>
 800090e:	e015      	b.n	800093c <commandAT+0xc8>
  else
	  sprintf(command, "%s%s=%s\r\n\0", AT, AT_CMD[cmd], val);
 8000910:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000914:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <commandAT+0xf8>)
 800091c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000920:	f107 000c 	add.w	r0, r7, #12
 8000924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000928:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000936:	4910      	ldr	r1, [pc, #64]	; (8000978 <commandAT+0x104>)
 8000938:	f002 fffa 	bl	8003930 <siprintf>

  HAL_Delay(50);
 800093c:	2032      	movs	r0, #50	; 0x32
 800093e:	f000 fd95 	bl	800146c <HAL_Delay>
  return feedbackSerial(command, exception);
 8000942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000946:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff0a 	bl	800076c <feedbackSerial>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	080042c0 	.word	0x080042c0
 8000968:	08004290 	.word	0x08004290
 800096c:	20000000 	.word	0x20000000
 8000970:	080042c4 	.word	0x080042c4
 8000974:	080042d0 	.word	0x080042d0
 8000978:	080042d8 	.word	0x080042d8

0800097c <uint32_tTocharPointer>:

char* uint32_tTocharPointer(uint32_t val){
 800097c:	b580      	push	{r7, lr}
 800097e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000982:	af00      	add	r7, sp, #0
 8000984:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000988:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800098c:	6018      	str	r0, [r3, #0]
	char buffer[1024];
	snprintf(buffer, sizeof(buffer), "%lu", (unsigned long)val);
 800098e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000992:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000996:	f107 0008 	add.w	r0, r7, #8
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <uint32_tTocharPointer+0x38>)
 800099e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a2:	f002 ff91 	bl	80038c8 <sniprintf>
	return buffer;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	080042e4 	.word	0x080042e4

080009b8 <indexOf>:

int indexOf(char* val, char search){
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < strlen(val); ++i){
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	e00b      	b.n	80009e2 <indexOf+0x2a>
		if(val[i] == search)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	78fa      	ldrb	r2, [r7, #3]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d101      	bne.n	80009dc <indexOf+0x24>
			return i;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	e00b      	b.n	80009f4 <indexOf+0x3c>
	for(uint8_t i = 0; i < strlen(val); ++i){
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	3301      	adds	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	7bfc      	ldrb	r4, [r7, #15]
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fbf3 	bl	80001d0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d3ec      	bcc.n	80009ca <indexOf+0x12>
	}
	return -1;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}

080009fc <deserializeAT>:
	if(val == 1)
		return "1";
	return "0";
}

void deserializeAT(uint8_t cmd) {
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
    char* val_char = commandAT(cmd, "", 0);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	491c      	ldr	r1, [pc, #112]	; (8000a7c <deserializeAT+0x80>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff31 	bl	8000874 <commandAT>
 8000a12:	60b8      	str	r0, [r7, #8]
    uint8_t count = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < strlen(val_char); ++i) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73bb      	strb	r3, [r7, #14]
 8000a1c:	e022      	b.n	8000a64 <deserializeAT+0x68>
        if (val_char[i] != ':') {
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b3a      	cmp	r3, #58	; 0x3a
 8000a28:	d016      	beq.n	8000a58 <deserializeAT+0x5c>
            if (count < strlen(val_char) - 1) {
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f7ff fbcf 	bl	80001d0 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	3b01      	subs	r3, #1
 8000a36:	429c      	cmp	r4, r3
 8000a38:	d211      	bcs.n	8000a5e <deserializeAT+0x62>
                payloads[count] += val_char[i];
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <deserializeAT+0x84>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	440b      	add	r3, r1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	440a      	add	r2, r1
 8000a50:	490b      	ldr	r1, [pc, #44]	; (8000a80 <deserializeAT+0x84>)
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a56:	e002      	b.n	8000a5e <deserializeAT+0x62>
            }
        } else {
            ++count;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < strlen(val_char); ++i) {
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	3301      	adds	r3, #1
 8000a62:	73bb      	strb	r3, [r7, #14]
 8000a64:	7bbc      	ldrb	r4, [r7, #14]
 8000a66:	68b8      	ldr	r0, [r7, #8]
 8000a68:	f7ff fbb2 	bl	80001d0 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	d3d5      	bcc.n	8000a1e <deserializeAT+0x22>
        }
    }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	08004290 	.word	0x08004290
 8000a80:	20000334 	.word	0x20000334

08000a84 <GPIO>:
    }

    return val;
}

uint16_t GPIO(uint8_t cmd, uint8_t pin, uint8_t val){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	71bb      	strb	r3, [r7, #6]
 8000a92:	4613      	mov	r3, r2
 8000a94:	717b      	strb	r3, [r7, #5]
  char* buff = "";
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <GPIO+0x64>)
 8000a98:	60fb      	str	r3, [r7, #12]

  if(val != 2){
 8000a9a:	797b      	ldrb	r3, [r7, #5]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d00d      	beq.n	8000abc <GPIO+0x38>
	sprintf(g_payload, "%d:%d\0", pin, val);
 8000aa0:	79ba      	ldrb	r2, [r7, #6]
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <GPIO+0x68>)
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <GPIO+0x6c>)
 8000aa8:	f002 ff42 	bl	8003930 <siprintf>
	buff = commandAT(cmd, g_payload, 0);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	490f      	ldr	r1, [pc, #60]	; (8000af0 <GPIO+0x6c>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fede 	bl	8000874 <commandAT>
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	e00a      	b.n	8000ad2 <GPIO+0x4e>
  }
  else{
	buff = commandAT(cmd, uint32_tTocharPointer(pin), 0);
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff5c 	bl	800097c <uint32_tTocharPointer>
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fed2 	bl	8000874 <commandAT>
 8000ad0:	60f8      	str	r0, [r7, #12]
  }

  return (uint16_t)strtoul(buff, NULL, 10);
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f002 ffc8 	bl	8003a6c <strtoul>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29b      	uxth	r3, r3
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08004290 	.word	0x08004290
 8000aec:	080042f0 	.word	0x080042f0
 8000af0:	20000234 	.word	0x20000234

08000af4 <LoRaWAN_Begin>:
  UART_WriteString(&huart2, "---------------------------------------------------\r\n");

  feedback = buff;
}

void LoRaWAN_Begin(uint8_t _feedback){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  feedback = _feedback;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <LoRaWAN_Begin+0x1c>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	7013      	strb	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20000230 	.word	0x20000230

08000b14 <JOIN>:
  else if(val == 1) commandAT(_CLASS_, "C", 0);
  else if(commandAT(_CLASS_, "", 0) == "C") return 1;
  return 0;
}

uint8_t JOIN(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  char* buff = commandAT(_JOIN_, "", 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	490e      	ldr	r1, [pc, #56]	; (8000b58 <JOIN+0x44>)
 8000b1e:	2013      	movs	r0, #19
 8000b20:	f7ff fea8 	bl	8000874 <commandAT>
 8000b24:	6078      	str	r0, [r7, #4]
  if(indexOf(buff, 'D') > 0 || indexOf(buff, 'K') > 0){
 8000b26:	2144      	movs	r1, #68	; 0x44
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff45 	bl	80009b8 <indexOf>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dc06      	bgt.n	8000b42 <JOIN+0x2e>
 8000b34:	214b      	movs	r1, #75	; 0x4b
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff3e 	bl	80009b8 <indexOf>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	dd05      	ble.n	8000b4e <JOIN+0x3a>
    connected = 1;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <JOIN+0x48>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
    return connected;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <JOIN+0x48>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	e000      	b.n	8000b50 <JOIN+0x3c>
  }

  return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08004290 	.word	0x08004290
 8000b5c:	20000231 	.word	0x20000231

08000b60 <pinMode>:
  periodicidade = uint32_tTocharPointer(payloads[3]);

  return uint32_tTocharPointer(payloads[0]);
}

uint8_t pinMode(uint8_t pin, uint8_t modo){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0c6      	sub	sp, #280	; 0x118
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4602      	mov	r2, r0
 8000b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b6c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b76:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b7a:	460a      	mov	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  uint8_t pull = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  if(pin > 9 || modo > 10) return 0;
 8000b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b88:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b09      	cmp	r3, #9
 8000b90:	d806      	bhi.n	8000ba0 <pinMode+0x40>
 8000b92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b96:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b0a      	cmp	r3, #10
 8000b9e:	d901      	bls.n	8000ba4 <pinMode+0x44>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e0eb      	b.n	8000d7c <pinMode+0x21c>
  else if((modo == OUTPUT_FA_PUSHPULL || modo == OUTPUT_FA_OPENDRAIN) && pin != 0 && pin != 1) return 0;
 8000ba4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ba8:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d006      	beq.n	8000bc0 <pinMode+0x60>
 8000bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bb6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d10f      	bne.n	8000be0 <pinMode+0x80>
 8000bc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bc4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <pinMode+0x80>
 8000bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d001      	beq.n	8000be0 <pinMode+0x80>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e0cd      	b.n	8000d7c <pinMode+0x21c>
  else if(modo == INPUT_ADC && pin != 0 && pin != 1 && pin != 7 && pin != 8) return 0;
 8000be0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000be4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d11d      	bne.n	8000c2a <pinMode+0xca>
 8000bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bf2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d016      	beq.n	8000c2a <pinMode+0xca>
 8000bfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c00:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d00f      	beq.n	8000c2a <pinMode+0xca>
 8000c0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c0e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d008      	beq.n	8000c2a <pinMode+0xca>
 8000c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c1c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d001      	beq.n	8000c2a <pinMode+0xca>
 8000c26:	2300      	movs	r3, #0
 8000c28:	e0a8      	b.n	8000d7c <pinMode+0x21c>
  else if((modo == INTERRUPT_RISING || modo == INTERRUPT_FALLING || modo == INTERRUPT_CHANGE) && pin == 0 && pin == 3 && pin == 7 && pin == 8) return 0;
 8000c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c2e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d00d      	beq.n	8000c54 <pinMode+0xf4>
 8000c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c3c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d006      	beq.n	8000c54 <pinMode+0xf4>
 8000c46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c4a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b0a      	cmp	r3, #10
 8000c52:	d11d      	bne.n	8000c90 <pinMode+0x130>
 8000c54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c58:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d116      	bne.n	8000c90 <pinMode+0x130>
 8000c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d10f      	bne.n	8000c90 <pinMode+0x130>
 8000c70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c74:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d108      	bne.n	8000c90 <pinMode+0x130>
 8000c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c82:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d101      	bne.n	8000c90 <pinMode+0x130>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e075      	b.n	8000d7c <pinMode+0x21c>

  if(modo == INPUT)
 8000c90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c94:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <pinMode+0x14c>
    modo = 0;
 8000c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ca2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e00c      	b.n	8000cc6 <pinMode+0x166>
  else if(modo == OUTPUT)
 8000cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cb0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d105      	bne.n	8000cc6 <pinMode+0x166>
    modo = 1;
 8000cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cbe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
  if(modo == INPUT_PULLUP){
 8000cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cca:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d109      	bne.n	8000ce8 <pinMode+0x188>
    modo = 0;
 8000cd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cd8:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
    pull = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ce6:	e00c      	b.n	8000d02 <pinMode+0x1a2>
  }
  else if(pull == INPUT_PULLDOWN){
 8000ce8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d108      	bne.n	8000d02 <pinMode+0x1a2>
    modo = 0;
 8000cf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cf4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
    pull = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  }

  deserializeAT(_GPIOC_);
 8000d02:	2022      	movs	r0, #34	; 0x22
 8000d04:	f7ff fe7a 	bl	80009fc <deserializeAT>
  uint8_t _modo = uint32_tTocharPointer(payloads[1]);
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <pinMode+0x228>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe35 	bl	800097c <uint32_tTocharPointer>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  uint8_t _pull = uint32_tTocharPointer(payloads[2]);
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <pinMode+0x228>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe2d 	bl	800097c <uint32_tTocharPointer>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

  char command[BUFFER_SIZE];
  sprintf(command, "%d:%d:%d\0", pin, modo, pull);
 8000d28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d2c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d36:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d40:	f107 000c 	add.w	r0, r7, #12
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	460b      	mov	r3, r1
 8000d48:	4910      	ldr	r1, [pc, #64]	; (8000d8c <pinMode+0x22c>)
 8000d4a:	f002 fdf1 	bl	8003930 <siprintf>

  if(_modo != modo || _pull != pull)
 8000d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d52:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d56:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d105      	bne.n	8000d6c <pinMode+0x20c>
 8000d60:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8000d64:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d006      	beq.n	8000d7a <pinMode+0x21a>
	  commandAT(_GPIOC_, command, 0);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	2022      	movs	r0, #34	; 0x22
 8000d76:	f7ff fd7d 	bl	8000874 <commandAT>
  return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000334 	.word	0x20000334
 8000d8c:	08004434 	.word	0x08004434

08000d90 <digitalWrite>:

uint8_t digitalRead(uint8_t pin){
  return (uint8_t)GPIO(_RPIN_, pin, "");
}

uint8_t digitalWrite(uint8_t pin, uint8_t val){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
  return (uint8_t)GPIO(_WPIN_, pin, val);
 8000da0:	79ba      	ldrb	r2, [r7, #6]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4619      	mov	r1, r3
 8000da6:	2023      	movs	r0, #35	; 0x23
 8000da8:	f7ff fe6c 	bl	8000a84 <GPIO>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b2db      	uxtb	r3, r3
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SendString>:
    return 1;
  return 0;
}

uint8_t SendString(char* string, uint8_t _port)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
  if(string == NULL || strnlen(string, BUFFER_SIZE) >= BUFFER_SIZE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <SendString+0x22>
 8000dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f002 fdce 	bl	8003970 <strnlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2bff      	cmp	r3, #255	; 0xff
 8000dd8:	d901      	bls.n	8000dde <SendString+0x26>
    return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e011      	b.n	8000e02 <SendString+0x4a>
  if(connected > 0){
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <SendString+0x54>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00c      	beq.n	8000e00 <SendString+0x48>
	sprintf(g_payload, "%d:%s\0", _port, string);
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4909      	ldr	r1, [pc, #36]	; (8000e10 <SendString+0x58>)
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <SendString+0x5c>)
 8000dee:	f002 fd9f 	bl	8003930 <siprintf>
	commandAT(_SEND_, g_payload, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <SendString+0x5c>)
 8000df6:	2016      	movs	r0, #22
 8000df8:	f7ff fd3c 	bl	8000874 <commandAT>
	return 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <SendString+0x4a>
  }

  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000231 	.word	0x20000231
 8000e10:	08004480 	.word	0x08004480
 8000e14:	20000234 	.word	0x20000234

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fab0 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f83f 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 f8f3 	bl	8001010 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e2a:	f000 f8c1 	bl	8000fb0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e2e:	f000 f88f 	bl	8000f50 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	  static uint8_t init = 0;
	  if(init < 1){
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <main+0x80>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10e      	bne.n	8000e58 <main+0x40>
		  LoRaWAN_Begin(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff fe5a 	bl	8000af4 <LoRaWAN_Begin>
		  pinMode(2, OUTPUT);
 8000e40:	2101      	movs	r1, #1
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fe8c 	bl	8000b60 <pinMode>
		  JOIN();
 8000e48:	f7ff fe64 	bl	8000b14 <JOIN>
		  ++init;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <main+0x80>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <main+0x80>)
 8000e56:	701a      	strb	r2, [r3, #0]
	  }

	  SendString("elcereza.com", 1);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <main+0x84>)
 8000e5c:	f7ff ffac 	bl	8000db8 <SendString>

	  for(uint8_t i = 0; i < 4; ++i){
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	e014      	b.n	8000e90 <main+0x78>
		  digitalWrite(2, 1);
 8000e66:	2101      	movs	r1, #1
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff ff91 	bl	8000d90 <digitalWrite>
		  HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f000 fafc 	bl	800146c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e74:	2108      	movs	r1, #8
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <main+0x88>)
 8000e78:	f000 fd8c 	bl	8001994 <HAL_GPIO_TogglePin>
		  digitalWrite(2, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f7ff ff86 	bl	8000d90 <digitalWrite>
		  HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f000 faf1 	bl	800146c <HAL_Delay>
	  for(uint8_t i = 0; i < 4; ++i){
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d9e7      	bls.n	8000e66 <main+0x4e>
  {
 8000e96:	e7cc      	b.n	8000e32 <main+0x1a>
 8000e98:	20000349 	.word	0x20000349
 8000e9c:	08004488 	.word	0x08004488
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b096      	sub	sp, #88	; 0x58
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2244      	movs	r2, #68	; 0x44
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fc10 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ec6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eca:	f000 fd9b 	bl	8001a04 <HAL_PWREx_ControlVoltageScaling>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ed4:	f000 f8e6 	bl	80010a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed8:	f000 fd76 	bl	80019c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <SystemClock_Config+0xa8>)
 8000ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <SystemClock_Config+0xa8>)
 8000ee4:	f023 0318 	bic.w	r3, r3, #24
 8000ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000eec:	2314      	movs	r3, #20
 8000eee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000efc:	23a0      	movs	r3, #160	; 0xa0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fdd1 	bl	8001ab0 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f14:	f000 f8c6 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f18:	230f      	movs	r3, #15
 8000f1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fa1f 	bl	8002374 <HAL_RCC_ClockConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f3c:	f000 f8b2 	bl	80010a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f40:	f001 fdc2 	bl	8002ac8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f44:	bf00      	nop
 8000f46:	3758      	adds	r7, #88	; 0x58
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000

08000f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <MX_USART1_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f94:	f001 fda8 	bl	8002ae8 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 f881 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000128 	.word	0x20000128
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f001 fd78 	bl	8002ae8 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f000 f851 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001ac 	.word	0x200001ac
 800100c:	40004400 	.word	0x40004400

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_GPIO_Init+0x8c>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_GPIO_Init+0x8c>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_GPIO_Init+0x8c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_GPIO_Init+0x8c>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <MX_GPIO_Init+0x8c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_GPIO_Init+0x8c>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_GPIO_Init+0x8c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <MX_GPIO_Init+0x8c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_GPIO_Init+0x8c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2108      	movs	r1, #8
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <MX_GPIO_Init+0x90>)
 8001074:	f000 fc76 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001078:	2308      	movs	r3, #8
 800107a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_GPIO_Init+0x90>)
 8001090:	f000 faf6 	bl	8001680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000400 	.word	0x48000400

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6613      	str	r3, [r2, #96]	; 0x60
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b098      	sub	sp, #96	; 0x60
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	2234      	movs	r2, #52	; 0x34
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fadd 	bl	80036d8 <memset>
  if(huart->Instance==USART1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_UART_MspInit+0x148>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d138      	bne.n	800119a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fb41 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001140:	f7ff ffb0 	bl	80010a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_UART_MspInit+0x14c>)
 8001146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001148:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <HAL_UART_MspInit+0x14c>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	6613      	str	r3, [r2, #96]	; 0x60
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <HAL_UART_MspInit+0x14c>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_UART_MspInit+0x14c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	4a38      	ldr	r2, [pc, #224]	; (8001244 <HAL_UART_MspInit+0x14c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_UART_MspInit+0x14c>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001174:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001186:	2307      	movs	r3, #7
 8001188:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f000 fa74 	bl	8001680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001198:	e04d      	b.n	8001236 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2a      	ldr	r2, [pc, #168]	; (8001248 <HAL_UART_MspInit+0x150>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d148      	bne.n	8001236 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fb03 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80011bc:	f7ff ff72 	bl	80010a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_UART_MspInit+0x14c>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_UART_MspInit+0x14c>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	6593      	str	r3, [r2, #88]	; 0x58
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_UART_MspInit+0x14c>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_UART_MspInit+0x14c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_UART_MspInit+0x14c>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x14c>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011f0:	2304      	movs	r3, #4
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001200:	2307      	movs	r3, #7
 8001202:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f000 fa37 	bl	8001680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001224:	2303      	movs	r3, #3
 8001226:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f000 fa25 	bl	8001680 <HAL_GPIO_Init>
}
 8001236:	bf00      	nop
 8001238:	3760      	adds	r7, #96	; 0x60
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40013800 	.word	0x40013800
 8001244:	40021000 	.word	0x40021000
 8001248:	40004400 	.word	0x40004400

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f8c8 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f002 f9c8 	bl	8003664 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000a000 	.word	0x2000a000
 8001300:	00000400 	.word	0x00000400
 8001304:	2000034c 	.word	0x2000034c
 8001308:	20000368 	.word	0x20000368

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 f987 	bl	8003670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff fd59 	bl	8000e18 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001374:	08004624 	.word	0x08004624
  ldr r2, =_sbss
 8001378:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800137c:	20000364 	.word	0x20000364

08001380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_2_IRQHandler>

08001382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f943 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f80e 	bl	80013b4 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a4:	f7ff fe84 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_InitTick+0x6c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d023      	beq.n	8001410 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_InitTick+0x70>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f941 	bl	8001666 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d809      	bhi.n	8001404 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f919 	bl	800162e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0x74>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e007      	b.n	8001414 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e004      	b.n	8001414 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e001      	b.n	8001414 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200000a4 	.word	0x200000a4
 8001424:	2000009c 	.word	0x2000009c
 8001428:	200000a0 	.word	0x200000a0

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200000a4 	.word	0x200000a4
 8001450:	20000350 	.word	0x20000350

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000350 	.word	0x20000350

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000a4 	.word	0x200000a4

080014b4 <__NVIC_SetPriorityGrouping>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_SetPriority>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff47 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff5c 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffb0 	bl	80015d4 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e14e      	b.n	800192e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8140 	beq.w	8001928 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d005      	beq.n	80016c0 <HAL_GPIO_Init+0x40>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 0201 	and.w	r2, r3, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b03      	cmp	r3, #3
 800172c:	d017      	beq.n	800175e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d123      	bne.n	80017b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0203 	and.w	r2, r3, #3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 809a 	beq.w	8001928 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	4b55      	ldr	r3, [pc, #340]	; (800194c <HAL_GPIO_Init+0x2cc>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x2cc>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001800:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_GPIO_Init+0x2cc>)
 8001802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800180c:	4a50      	ldr	r2, [pc, #320]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1e0>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a46      	ldr	r2, [pc, #280]	; (8001954 <HAL_GPIO_Init+0x2d4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1dc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a45      	ldr	r2, [pc, #276]	; (8001958 <HAL_GPIO_Init+0x2d8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1d8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a44      	ldr	r2, [pc, #272]	; (800195c <HAL_GPIO_Init+0x2dc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1d4>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 8001854:	2307      	movs	r3, #7
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a4:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ce:	4a24      	ldr	r2, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aea9 	bne.w	8001690 <HAL_GPIO_Init+0x10>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001980:	e002      	b.n	8001988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43d9      	mvns	r1, r3
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	400b      	ands	r3, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40007000 	.word	0x40007000

080019e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40007000 	.word	0x40007000

08001a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a12:	d130      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d038      	beq.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2232      	movs	r2, #50	; 0x32
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0c9b      	lsrs	r3, r3, #18
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a48:	e002      	b.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	d102      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f2      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a70:	d110      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e00f      	b.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a82:	d007      	beq.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	2000009c 	.word	0x2000009c
 8001aac:	431bde83 	.word	0x431bde83

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f000 bc4f 	b.w	8002362 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac4:	4b97      	ldr	r3, [pc, #604]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ace:	4b95      	ldr	r3, [pc, #596]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80e6 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_RCC_OscConfig+0x4c>
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	f040 808d 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f040 8089 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afc:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_RCC_OscConfig+0x66>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f000 bc26 	b.w	8002362 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1a:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_RCC_OscConfig+0x80>
 8001b26:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2e:	e005      	b.n	8001b3c <HAL_RCC_OscConfig+0x8c>
 8001b30:	4b7c      	ldr	r3, [pc, #496]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d224      	bcs.n	8001b8a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fdd9 	bl	80026fc <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f000 bc06 	b.w	8002362 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	496d      	ldr	r1, [pc, #436]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b74:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4968      	ldr	r1, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e025      	b.n	8001bd6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8a:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	4960      	ldr	r1, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	495b      	ldr	r1, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd98 	bl	80026fc <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3c5      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd6:	f000 fccd 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4950      	ldr	r1, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x278>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fbda 	bl	80013b4 <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d052      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	e3a9      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d032      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a42      	ldr	r2, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fc17 	bl	8001454 <HAL_GetTick>
 8001c26:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fc13 	bl	8001454 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e392      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	4930      	ldr	r1, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	492b      	ldr	r1, [pc, #172]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e01a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fbe4 	bl	8001454 <HAL_GetTick>
 8001c8c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c90:	f7ff fbe0 	bl	8001454 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e35f      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1e0>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d073      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x220>
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d063      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d15f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e33c      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x250>
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e025      	b.n	8001d4c <HAL_RCC_OscConfig+0x29c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_OscConfig+0x284>
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a02      	ldr	r2, [pc, #8]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x29c>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08004498 	.word	0x08004498
 8001d2c:	2000009c 	.word	0x2000009c
 8001d30:	200000a0 	.word	0x200000a0
 8001d34:	4b8f      	ldr	r3, [pc, #572]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a8e      	ldr	r2, [pc, #568]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b8c      	ldr	r3, [pc, #560]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a8b      	ldr	r2, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb7e 	bl	8001454 <HAL_GetTick>
 8001d58:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fb7a 	bl	8001454 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2f9      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b81      	ldr	r3, [pc, #516]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2ac>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fb6a 	bl	8001454 <HAL_GetTick>
 8001d80:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fb66 	bl	8001454 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e2e5      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x314>
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x32c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e2c2      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4962      	ldr	r1, [pc, #392]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5d      	ldr	r2, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb25 	bl	8001454 <HAL_GetTick>
 8001e0a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fb21 	bl	8001454 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e2a0      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	494e      	ldr	r1, [pc, #312]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fb01 	bl	8001454 <HAL_GetTick>
 8001e52:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fafd 	bl	8001454 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e27c      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8082 	beq.w	8001f86 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d05f      	beq.n	8001f4a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d037      	beq.n	8001f10 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e254      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01b      	beq.n	8001efa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed2:	f7ff fabf 	bl	8001454 <HAL_GetTick>
 8001ed6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff fabb 	bl	8001454 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b11      	cmp	r3, #17
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e23a      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f00:	f023 0210 	bic.w	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	491a      	ldr	r1, [pc, #104]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff fa98 	bl	8001454 <HAL_GetTick>
 8001f24:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fa94 	bl	8001454 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b11      	cmp	r3, #17
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e213      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCC_OscConfig+0x478>
 8001f48:	e01d      	b.n	8001f86 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fa7b 	bl	8001454 <HAL_GetTick>
 8001f5e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff fa77 	bl	8001454 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d903      	bls.n	8001f78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1f6      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
 8001f74:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f78:	4ba9      	ldr	r3, [pc, #676]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ed      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80bd 	beq.w	800210e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f9a:	4ba1      	ldr	r3, [pc, #644]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b9e      	ldr	r3, [pc, #632]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a9d      	ldr	r2, [pc, #628]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b9b      	ldr	r3, [pc, #620]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	4b97      	ldr	r3, [pc, #604]	; (8002224 <HAL_RCC_OscConfig+0x774>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d118      	bne.n	8002002 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd0:	4b94      	ldr	r3, [pc, #592]	; (8002224 <HAL_RCC_OscConfig+0x774>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a93      	ldr	r2, [pc, #588]	; (8002224 <HAL_RCC_OscConfig+0x774>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fa3a 	bl	8001454 <HAL_GetTick>
 8001fe0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7ff fa36 	bl	8001454 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1b5      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b8b      	ldr	r3, [pc, #556]	; (8002224 <HAL_RCC_OscConfig+0x774>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02c      	beq.n	8002068 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800200e:	4b84      	ldr	r3, [pc, #528]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002034:	4b7a      	ldr	r3, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a79      	ldr	r2, [pc, #484]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002044:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a75      	ldr	r2, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002054:	e018      	b.n	8002088 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	4a70      	ldr	r2, [pc, #448]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002066:	e00f      	b.n	8002088 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002068:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a6c      	ldr	r2, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002078:	4b69      	ldr	r3, [pc, #420]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a68      	ldr	r2, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d016      	beq.n	80020be <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f9e0 	bl	8001454 <HAL_GetTick>
 8002094:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff f9dc 	bl	8001454 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e159      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	4b5c      	ldr	r3, [pc, #368]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ed      	beq.n	8002098 <HAL_RCC_OscConfig+0x5e8>
 80020bc:	e01d      	b.n	80020fa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff f9c9 	bl	8001454 <HAL_GetTick>
 80020c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff f9c5 	bl	8001454 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e142      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ed      	bne.n	80020c6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80020ea:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 80020f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a46      	ldr	r2, [pc, #280]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03c      	beq.n	8002194 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01c      	beq.n	800215c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002128:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff f98f 	bl	8001454 <HAL_GetTick>
 8002136:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213a:	f7ff f98b 	bl	8001454 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e10a      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214c:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ef      	beq.n	800213a <HAL_RCC_OscConfig+0x68a>
 800215a:	e01b      	b.n	8002194 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800215e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002162:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff f972 	bl	8001454 <HAL_GetTick>
 8002170:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002174:	f7ff f96e 	bl	8001454 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0ed      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ef      	bne.n	8002174 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80e1 	beq.w	8002360 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	f040 80b5 	bne.w	8002312 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d124      	bne.n	8002206 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	3b01      	subs	r3, #1
 80021c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11b      	bne.n	8002206 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d113      	bne.n	8002206 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d05f      	beq.n	80022c6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d05a      	beq.n	80022c2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <HAL_RCC_OscConfig+0x770>)
 8002212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002218:	f7ff f91c 	bl	8001454 <HAL_GetTick>
 800221c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221e:	e00c      	b.n	800223a <HAL_RCC_OscConfig+0x78a>
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f914 	bl	8001454 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e093      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x8c0>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002256:	3a01      	subs	r2, #1
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	4311      	orrs	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002260:	0212      	lsls	r2, r2, #8
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002268:	0852      	lsrs	r2, r2, #1
 800226a:	3a01      	subs	r2, #1
 800226c:	0552      	lsls	r2, r2, #21
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002274:	0852      	lsrs	r2, r2, #1
 8002276:	3a01      	subs	r2, #1
 8002278:	0652      	lsls	r2, r2, #25
 800227a:	430a      	orrs	r2, r1
 800227c:	493b      	ldr	r1, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a39      	ldr	r2, [pc, #228]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a36      	ldr	r2, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002298:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800229a:	f7ff f8db 	bl	8001454 <HAL_GetTick>
 800229e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff f8d7 	bl	8001454 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e056      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c0:	e04e      	b.n	8002360 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e04d      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d146      	bne.n	8002360 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a25      	ldr	r2, [pc, #148]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 80022d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a22      	ldr	r2, [pc, #136]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 80022e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ea:	f7ff f8b3 	bl	8001454 <HAL_GetTick>
 80022ee:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff f8af 	bl	8001454 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e02e      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x842>
 8002310:	e026      	b.n	8002360 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	2b0c      	cmp	r3, #12
 8002316:	d021      	beq.n	800235c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 800231e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff f896 	bl	8001454 <HAL_GetTick>
 8002328:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f892 	bl	8001454 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e011      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_RCC_OscConfig+0x8bc>)
 8002350:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002354:	f023 0303 	bic.w	r3, r3, #3
 8002358:	60d3      	str	r3, [r2, #12]
 800235a:	e001      	b.n	8002360 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	f99f808c 	.word	0xf99f808c

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0e7      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b75      	ldr	r3, [pc, #468]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b72      	ldr	r3, [pc, #456]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4970      	ldr	r1, [pc, #448]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0cf      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d908      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4960      	ldr	r1, [pc, #384]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d04c      	beq.n	800248c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0a6      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e09a      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242a:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e08e      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e086      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4943      	ldr	r1, [pc, #268]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fffa 	bl	8001454 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe fff6 	bl	8001454 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e06e      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d208      	bcs.n	80024ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	492b      	ldr	r1, [pc, #172]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d210      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 0207 	bic.w	r2, r3, #7
 80024d0:	4923      	ldr	r1, [pc, #140]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_RCC_ClockConfig+0x1ec>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e036      	b.n	8002558 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4918      	ldr	r1, [pc, #96]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4910      	ldr	r1, [pc, #64]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002528:	f000 f824 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_ClockConfig+0x1f0>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	490b      	ldr	r1, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1f4>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1f8>)
 8002546:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1fc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe ff31 	bl	80013b4 <HAL_InitTick>
 8002552:	4603      	mov	r3, r0
 8002554:	72fb      	strb	r3, [r7, #11]

  return status;
 8002556:	7afb      	ldrb	r3, [r7, #11]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	08004498 	.word	0x08004498
 800256c:	2000009c 	.word	0x2000009c
 8002570:	200000a0 	.word	0x200000a0

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002582:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258c:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d121      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d11e      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a8:	4b34      	ldr	r3, [pc, #208]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e004      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_RCC_GetSysClockFreq+0x114>)
 80025fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d134      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0xa6>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d003      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xac>
 8002618:	e005      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCC_GetSysClockFreq+0x110>)
 800261c:	617b      	str	r3, [r7, #20]
      break;
 800261e:	e005      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_GetSysClockFreq+0x114>)
 8002622:	617b      	str	r3, [r7, #20]
      break;
 8002624:	e002      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	617b      	str	r3, [r7, #20]
      break;
 800262a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	3301      	adds	r3, #1
 8002638:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	fb03 f202 	mul.w	r2, r3, r2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	0e5b      	lsrs	r3, r3, #25
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800266c:	69bb      	ldr	r3, [r7, #24]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	080044b0 	.word	0x080044b0
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200

0800268c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000009c 	.word	0x2000009c

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080044a8 	.word	0x080044a8

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d4:	f7ff ffda 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	080044a8 	.word	0x080044a8

080026fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002714:	f7ff f968 	bl	80019e8 <HAL_PWREx_GetVoltageRange>
 8002718:	6178      	str	r0, [r7, #20]
 800271a:	e014      	b.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002734:	f7ff f958 	bl	80019e8 <HAL_PWREx_GetVoltageRange>
 8002738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274c:	d10b      	bne.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d919      	bls.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2ba0      	cmp	r3, #160	; 0xa0
 8002758:	d902      	bls.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800275a:	2302      	movs	r3, #2
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e013      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e010      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d902      	bls.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800276c:	2303      	movs	r3, #3
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e00a      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d102      	bne.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e004      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d101      	bne.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 0207 	bic.w	r2, r3, #7
 8002790:	4909      	ldr	r1, [pc, #36]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40022000 	.word	0x40022000

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 809e 	beq.w	8002916 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281c:	f7fe fe1a 	bl	8001454 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe fe16 	bl	8001454 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	74fb      	strb	r3, [r7, #19]
        break;
 8002836:	e005      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ef      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d15a      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800284a:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01e      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	429a      	cmp	r2, r3
 8002864:	d019      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002870:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002892:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fdd6 	bl	8001454 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	e00b      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fdd2 	bl	8001454 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d902      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	74fb      	strb	r3, [r7, #19]
            break;
 80028c2:	e006      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ec      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4904      	ldr	r1, [pc, #16]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ee:	e009      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
 80028f4:	e006      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002904:	7c7b      	ldrb	r3, [r7, #17]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290a:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	4a6d      	ldr	r2, [pc, #436]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002922:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 0203 	bic.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4964      	ldr	r1, [pc, #400]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002944:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 020c 	bic.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002966:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4953      	ldr	r1, [pc, #332]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002988:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	494b      	ldr	r1, [pc, #300]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4942      	ldr	r1, [pc, #264]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029cc:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	493a      	ldr	r1, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4931      	ldr	r1, [pc, #196]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4929      	ldr	r1, [pc, #164]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4920      	ldr	r1, [pc, #128]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	4918      	ldr	r1, [pc, #96]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a72:	d105      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ab8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e040      	b.n	8002b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe faf4 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f992 	bl	8002e50 <UART_SetConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fbe0 	bl	8003304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fc67 	bl	8003448 <UART_CheckIdleState>
 8002b7a:	4603      	mov	r3, r0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 8082 	bne.w	8002ca2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_UART_Transmit+0x26>
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07a      	b.n	8002ca4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_UART_Transmit+0x38>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e073      	b.n	8002ca4 <HAL_UART_Transmit+0x120>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fc3f 	bl	8001454 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf0:	d108      	bne.n	8002c04 <HAL_UART_Transmit+0x80>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	e003      	b.n	8002c0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c14:	e02d      	b.n	8002c72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fc5a 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e039      	b.n	8002ca4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	881a      	ldrh	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c42:	b292      	uxth	r2, r2
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e008      	b.n	8002c60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b292      	uxth	r2, r2
 8002c58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1cb      	bne.n	8002c16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fc26 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e005      	b.n	8002ca4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	f040 80bf 	bne.w	8002e44 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_UART_Receive+0x26>
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e0b7      	b.n	8002e46 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_UART_Receive+0x38>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0b0      	b.n	8002e46 <HAL_UART_Receive+0x19a>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2222      	movs	r2, #34	; 0x22
 8002cf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fba8 	bl	8001454 <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	d10e      	bne.n	8002d3e <HAL_UART_Receive+0x92>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_UART_Receive+0x88>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d32:	e02d      	b.n	8002d90 <HAL_UART_Receive+0xe4>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d3c:	e028      	b.n	8002d90 <HAL_UART_Receive+0xe4>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_UART_Receive+0xb6>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_UART_Receive+0xac>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d56:	e01b      	b.n	8002d90 <HAL_UART_Receive+0xe4>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	227f      	movs	r2, #127	; 0x7f
 8002d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d60:	e016      	b.n	8002d90 <HAL_UART_Receive+0xe4>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6a:	d10d      	bne.n	8002d88 <HAL_UART_Receive+0xdc>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <HAL_UART_Receive+0xd2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	227f      	movs	r2, #127	; 0x7f
 8002d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d7c:	e008      	b.n	8002d90 <HAL_UART_Receive+0xe4>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	223f      	movs	r2, #63	; 0x3f
 8002d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d86:	e003      	b.n	8002d90 <HAL_UART_Receive+0xe4>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d108      	bne.n	8002db4 <HAL_UART_Receive+0x108>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e003      	b.n	8002dbc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dc4:	e033      	b.n	8002e2e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2120      	movs	r1, #32
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fb82 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e032      	b.n	8002e46 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	8a7b      	ldrh	r3, [r7, #18]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e00d      	b.n	8002e1c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8a7b      	ldrh	r3, [r7, #18]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1c5      	bne.n	8002dc6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b08a      	sub	sp, #40	; 0x28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b9e      	ldr	r3, [pc, #632]	; (80030f8 <UART_SetConfig+0x2a8>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a93      	ldr	r2, [pc, #588]	; (80030fc <UART_SetConfig+0x2ac>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a8a      	ldr	r2, [pc, #552]	; (8003100 <UART_SetConfig+0x2b0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d126      	bne.n	8002f28 <UART_SetConfig+0xd8>
 8002eda:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <UART_SetConfig+0x2b4>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d81b      	bhi.n	8002f20 <UART_SetConfig+0xd0>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <UART_SetConfig+0xa0>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f11 	.word	0x08002f11
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f19 	.word	0x08002f19
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e0ab      	b.n	8003060 <UART_SetConfig+0x210>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e0a7      	b.n	8003060 <UART_SetConfig+0x210>
 8002f10:	2304      	movs	r3, #4
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e0a3      	b.n	8003060 <UART_SetConfig+0x210>
 8002f18:	2308      	movs	r3, #8
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1e:	e09f      	b.n	8003060 <UART_SetConfig+0x210>
 8002f20:	2310      	movs	r3, #16
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e09b      	b.n	8003060 <UART_SetConfig+0x210>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a76      	ldr	r2, [pc, #472]	; (8003108 <UART_SetConfig+0x2b8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d138      	bne.n	8002fa4 <UART_SetConfig+0x154>
 8002f32:	4b74      	ldr	r3, [pc, #464]	; (8003104 <UART_SetConfig+0x2b4>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d82d      	bhi.n	8002f9c <UART_SetConfig+0x14c>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0xf8>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08002f9d 	.word	0x08002f9d
 8002f50:	08002f9d 	.word	0x08002f9d
 8002f54:	08002f9d 	.word	0x08002f9d
 8002f58:	08002f8d 	.word	0x08002f8d
 8002f5c:	08002f9d 	.word	0x08002f9d
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002f9d 	.word	0x08002f9d
 8002f68:	08002f85 	.word	0x08002f85
 8002f6c:	08002f9d 	.word	0x08002f9d
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002f9d 	.word	0x08002f9d
 8002f78:	08002f95 	.word	0x08002f95
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f82:	e06d      	b.n	8003060 <UART_SetConfig+0x210>
 8002f84:	2302      	movs	r3, #2
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8a:	e069      	b.n	8003060 <UART_SetConfig+0x210>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f92:	e065      	b.n	8003060 <UART_SetConfig+0x210>
 8002f94:	2308      	movs	r3, #8
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9a:	e061      	b.n	8003060 <UART_SetConfig+0x210>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa2:	e05d      	b.n	8003060 <UART_SetConfig+0x210>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <UART_SetConfig+0x2bc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d125      	bne.n	8002ffa <UART_SetConfig+0x1aa>
 8002fae:	4b55      	ldr	r3, [pc, #340]	; (8003104 <UART_SetConfig+0x2b4>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fb8:	2b30      	cmp	r3, #48	; 0x30
 8002fba:	d016      	beq.n	8002fea <UART_SetConfig+0x19a>
 8002fbc:	2b30      	cmp	r3, #48	; 0x30
 8002fbe:	d818      	bhi.n	8002ff2 <UART_SetConfig+0x1a2>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d00a      	beq.n	8002fda <UART_SetConfig+0x18a>
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d814      	bhi.n	8002ff2 <UART_SetConfig+0x1a2>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <UART_SetConfig+0x182>
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d008      	beq.n	8002fe2 <UART_SetConfig+0x192>
 8002fd0:	e00f      	b.n	8002ff2 <UART_SetConfig+0x1a2>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd8:	e042      	b.n	8003060 <UART_SetConfig+0x210>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe0:	e03e      	b.n	8003060 <UART_SetConfig+0x210>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe8:	e03a      	b.n	8003060 <UART_SetConfig+0x210>
 8002fea:	2308      	movs	r3, #8
 8002fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff0:	e036      	b.n	8003060 <UART_SetConfig+0x210>
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff8:	e032      	b.n	8003060 <UART_SetConfig+0x210>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3f      	ldr	r2, [pc, #252]	; (80030fc <UART_SetConfig+0x2ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d12a      	bne.n	800305a <UART_SetConfig+0x20a>
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <UART_SetConfig+0x2b4>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800300e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003012:	d01a      	beq.n	800304a <UART_SetConfig+0x1fa>
 8003014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003018:	d81b      	bhi.n	8003052 <UART_SetConfig+0x202>
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301e:	d00c      	beq.n	800303a <UART_SetConfig+0x1ea>
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003024:	d815      	bhi.n	8003052 <UART_SetConfig+0x202>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <UART_SetConfig+0x1e2>
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d008      	beq.n	8003042 <UART_SetConfig+0x1f2>
 8003030:	e00f      	b.n	8003052 <UART_SetConfig+0x202>
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003038:	e012      	b.n	8003060 <UART_SetConfig+0x210>
 800303a:	2302      	movs	r3, #2
 800303c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003040:	e00e      	b.n	8003060 <UART_SetConfig+0x210>
 8003042:	2304      	movs	r3, #4
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003048:	e00a      	b.n	8003060 <UART_SetConfig+0x210>
 800304a:	2308      	movs	r3, #8
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003050:	e006      	b.n	8003060 <UART_SetConfig+0x210>
 8003052:	2310      	movs	r3, #16
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003058:	e002      	b.n	8003060 <UART_SetConfig+0x210>
 800305a:	2310      	movs	r3, #16
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <UART_SetConfig+0x2ac>)
 8003066:	4293      	cmp	r3, r2
 8003068:	f040 808a 	bne.w	8003180 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800306c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003070:	2b08      	cmp	r3, #8
 8003072:	d824      	bhi.n	80030be <UART_SetConfig+0x26e>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <UART_SetConfig+0x22c>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030af 	.word	0x080030af
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7ff fb00 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80030a4:	61f8      	str	r0, [r7, #28]
        break;
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <UART_SetConfig+0x2c0>)
 80030aa:	61fb      	str	r3, [r7, #28]
        break;
 80030ac:	e00d      	b.n	80030ca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7ff fa61 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80030b2:	61f8      	str	r0, [r7, #28]
        break;
 80030b4:	e009      	b.n	80030ca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ba:	61fb      	str	r3, [r7, #28]
        break;
 80030bc:	e005      	b.n	80030ca <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8109 	beq.w	80032e4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d305      	bcc.n	80030ee <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d912      	bls.n	8003114 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030f4:	e0f6      	b.n	80032e4 <UART_SetConfig+0x494>
 80030f6:	bf00      	nop
 80030f8:	efff69f3 	.word	0xefff69f3
 80030fc:	40008000 	.word	0x40008000
 8003100:	40013800 	.word	0x40013800
 8003104:	40021000 	.word	0x40021000
 8003108:	40004400 	.word	0x40004400
 800310c:	40004800 	.word	0x40004800
 8003110:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2200      	movs	r2, #0
 8003118:	461c      	mov	r4, r3
 800311a:	4615      	mov	r5, r2
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	022b      	lsls	r3, r5, #8
 8003126:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800312a:	0222      	lsls	r2, r4, #8
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	2000      	movs	r0, #0
 8003134:	4688      	mov	r8, r1
 8003136:	4681      	mov	r9, r0
 8003138:	eb12 0a08 	adds.w	sl, r2, r8
 800313c:	eb43 0b09 	adc.w	fp, r3, r9
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314e:	4650      	mov	r0, sl
 8003150:	4659      	mov	r1, fp
 8003152:	f7fd f895 	bl	8000280 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4613      	mov	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003164:	d308      	bcc.n	8003178 <UART_SetConfig+0x328>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316c:	d204      	bcs.n	8003178 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	e0b5      	b.n	80032e4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800317e:	e0b1      	b.n	80032e4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	d15d      	bne.n	8003246 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800318a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800318e:	2b08      	cmp	r3, #8
 8003190:	d827      	bhi.n	80031e2 <UART_SetConfig+0x392>
 8003192:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <UART_SetConfig+0x348>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031bd 	.word	0x080031bd
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031cd 	.word	0x080031cd
 80031a4:	080031e3 	.word	0x080031e3
 80031a8:	080031d3 	.word	0x080031d3
 80031ac:	080031e3 	.word	0x080031e3
 80031b0:	080031e3 	.word	0x080031e3
 80031b4:	080031e3 	.word	0x080031e3
 80031b8:	080031db 	.word	0x080031db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031bc:	f7ff fa72 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80031c0:	61f8      	str	r0, [r7, #28]
        break;
 80031c2:	e014      	b.n	80031ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c4:	f7ff fa84 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80031c8:	61f8      	str	r0, [r7, #28]
        break;
 80031ca:	e010      	b.n	80031ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031cc:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <UART_SetConfig+0x4b0>)
 80031ce:	61fb      	str	r3, [r7, #28]
        break;
 80031d0:	e00d      	b.n	80031ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d2:	f7ff f9cf 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80031d6:	61f8      	str	r0, [r7, #28]
        break;
 80031d8:	e009      	b.n	80031ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031de:	61fb      	str	r3, [r7, #28]
        break;
 80031e0:	e005      	b.n	80031ee <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d077      	beq.n	80032e4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005a      	lsls	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	085b      	lsrs	r3, r3, #1
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d916      	bls.n	800323e <UART_SetConfig+0x3ee>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d212      	bcs.n	800323e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f023 030f 	bic.w	r3, r3, #15
 8003220:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	b29b      	uxth	r3, r3
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	b29a      	uxth	r2, r3
 800322e:	8afb      	ldrh	r3, [r7, #22]
 8003230:	4313      	orrs	r3, r2
 8003232:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	8afa      	ldrh	r2, [r7, #22]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	e052      	b.n	80032e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003244:	e04e      	b.n	80032e4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324a:	2b08      	cmp	r3, #8
 800324c:	d827      	bhi.n	800329e <UART_SetConfig+0x44e>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x404>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003279 	.word	0x08003279
 8003258:	08003281 	.word	0x08003281
 800325c:	08003289 	.word	0x08003289
 8003260:	0800329f 	.word	0x0800329f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800329f 	.word	0x0800329f
 800326c:	0800329f 	.word	0x0800329f
 8003270:	0800329f 	.word	0x0800329f
 8003274:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7ff fa14 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800327c:	61f8      	str	r0, [r7, #28]
        break;
 800327e:	e014      	b.n	80032aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff fa26 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003284:	61f8      	str	r0, [r7, #28]
        break;
 8003286:	e010      	b.n	80032aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <UART_SetConfig+0x4b0>)
 800328a:	61fb      	str	r3, [r7, #28]
        break;
 800328c:	e00d      	b.n	80032aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7ff f971 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8003292:	61f8      	str	r0, [r7, #28]
        break;
 8003294:	e009      	b.n	80032aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61fb      	str	r3, [r7, #28]
        break;
 800329c:	e005      	b.n	80032aa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032a8:	bf00      	nop
    }

    if (pclk != 0U)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d019      	beq.n	80032e4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	085a      	lsrs	r2, r3, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	441a      	add	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	d909      	bls.n	80032de <UART_SetConfig+0x48e>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d205      	bcs.n	80032de <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e002      	b.n	80032e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fe:	bf00      	nop
 8003300:	00f42400 	.word	0x00f42400

08003304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01a      	beq.n	800341a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003402:	d10a      	bne.n	800341a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003458:	f7fd fffc 	bl	8001454 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d10e      	bne.n	800348a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f82d 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e023      	b.n	80034d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d10e      	bne.n	80034b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f817 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e00d      	b.n	80034d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b09c      	sub	sp, #112	; 0x70
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ea:	e0a5      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	f000 80a1 	beq.w	8003638 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fd ffad 	bl	8001454 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <UART_WaitOnFlagUntilTimeout+0x32>
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	2b00      	cmp	r3, #0
 800350a:	d13e      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800351a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003520:	667b      	str	r3, [r7, #100]	; 0x64
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800352a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e6      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	663b      	str	r3, [r7, #96]	; 0x60
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3308      	adds	r3, #8
 800355c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800355e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800356c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e5      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e067      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d04f      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a6:	d147      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
 80035d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e6      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	613b      	str	r3, [r7, #16]
   return(result);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3308      	adds	r3, #8
 8003602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003604:	623a      	str	r2, [r7, #32]
 8003606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	69f9      	ldr	r1, [r7, #28]
 800360a:	6a3a      	ldr	r2, [r7, #32]
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	61bb      	str	r3, [r7, #24]
   return(result);
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e010      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	f43f af4a 	beq.w	80034ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3770      	adds	r7, #112	; 0x70
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <__errno>:
 8003664:	4b01      	ldr	r3, [pc, #4]	; (800366c <__errno+0x8>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200000a8 	.word	0x200000a8

08003670 <__libc_init_array>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4d0d      	ldr	r5, [pc, #52]	; (80036a8 <__libc_init_array+0x38>)
 8003674:	4c0d      	ldr	r4, [pc, #52]	; (80036ac <__libc_init_array+0x3c>)
 8003676:	1b64      	subs	r4, r4, r5
 8003678:	10a4      	asrs	r4, r4, #2
 800367a:	2600      	movs	r6, #0
 800367c:	42a6      	cmp	r6, r4
 800367e:	d109      	bne.n	8003694 <__libc_init_array+0x24>
 8003680:	4d0b      	ldr	r5, [pc, #44]	; (80036b0 <__libc_init_array+0x40>)
 8003682:	4c0c      	ldr	r4, [pc, #48]	; (80036b4 <__libc_init_array+0x44>)
 8003684:	f000 fd5a 	bl	800413c <_init>
 8003688:	1b64      	subs	r4, r4, r5
 800368a:	10a4      	asrs	r4, r4, #2
 800368c:	2600      	movs	r6, #0
 800368e:	42a6      	cmp	r6, r4
 8003690:	d105      	bne.n	800369e <__libc_init_array+0x2e>
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	f855 3b04 	ldr.w	r3, [r5], #4
 8003698:	4798      	blx	r3
 800369a:	3601      	adds	r6, #1
 800369c:	e7ee      	b.n	800367c <__libc_init_array+0xc>
 800369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a2:	4798      	blx	r3
 80036a4:	3601      	adds	r6, #1
 80036a6:	e7f2      	b.n	800368e <__libc_init_array+0x1e>
 80036a8:	0800461c 	.word	0x0800461c
 80036ac:	0800461c 	.word	0x0800461c
 80036b0:	0800461c 	.word	0x0800461c
 80036b4:	08004620 	.word	0x08004620

080036b8 <malloc>:
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <malloc+0xc>)
 80036ba:	4601      	mov	r1, r0
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	f000 b87f 	b.w	80037c0 <_malloc_r>
 80036c2:	bf00      	nop
 80036c4:	200000a8 	.word	0x200000a8

080036c8 <free>:
 80036c8:	4b02      	ldr	r3, [pc, #8]	; (80036d4 <free+0xc>)
 80036ca:	4601      	mov	r1, r0
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	f000 b80b 	b.w	80036e8 <_free_r>
 80036d2:	bf00      	nop
 80036d4:	200000a8 	.word	0x200000a8

080036d8 <memset>:
 80036d8:	4402      	add	r2, r0
 80036da:	4603      	mov	r3, r0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	f803 1b01 	strb.w	r1, [r3], #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <_free_r>:
 80036e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ea:	2900      	cmp	r1, #0
 80036ec:	d044      	beq.n	8003778 <_free_r+0x90>
 80036ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f2:	9001      	str	r0, [sp, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f1a1 0404 	sub.w	r4, r1, #4
 80036fa:	bfb8      	it	lt
 80036fc:	18e4      	addlt	r4, r4, r3
 80036fe:	f000 f9bf 	bl	8003a80 <__malloc_lock>
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <_free_r+0x94>)
 8003704:	9801      	ldr	r0, [sp, #4]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	b933      	cbnz	r3, 8003718 <_free_r+0x30>
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6014      	str	r4, [r2, #0]
 800370e:	b003      	add	sp, #12
 8003710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003714:	f000 b9ba 	b.w	8003a8c <__malloc_unlock>
 8003718:	42a3      	cmp	r3, r4
 800371a:	d908      	bls.n	800372e <_free_r+0x46>
 800371c:	6825      	ldr	r5, [r4, #0]
 800371e:	1961      	adds	r1, r4, r5
 8003720:	428b      	cmp	r3, r1
 8003722:	bf01      	itttt	eq
 8003724:	6819      	ldreq	r1, [r3, #0]
 8003726:	685b      	ldreq	r3, [r3, #4]
 8003728:	1949      	addeq	r1, r1, r5
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	e7ed      	b.n	800370a <_free_r+0x22>
 800372e:	461a      	mov	r2, r3
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b10b      	cbz	r3, 8003738 <_free_r+0x50>
 8003734:	42a3      	cmp	r3, r4
 8003736:	d9fa      	bls.n	800372e <_free_r+0x46>
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	1855      	adds	r5, r2, r1
 800373c:	42a5      	cmp	r5, r4
 800373e:	d10b      	bne.n	8003758 <_free_r+0x70>
 8003740:	6824      	ldr	r4, [r4, #0]
 8003742:	4421      	add	r1, r4
 8003744:	1854      	adds	r4, r2, r1
 8003746:	42a3      	cmp	r3, r4
 8003748:	6011      	str	r1, [r2, #0]
 800374a:	d1e0      	bne.n	800370e <_free_r+0x26>
 800374c:	681c      	ldr	r4, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	4421      	add	r1, r4
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	e7da      	b.n	800370e <_free_r+0x26>
 8003758:	d902      	bls.n	8003760 <_free_r+0x78>
 800375a:	230c      	movs	r3, #12
 800375c:	6003      	str	r3, [r0, #0]
 800375e:	e7d6      	b.n	800370e <_free_r+0x26>
 8003760:	6825      	ldr	r5, [r4, #0]
 8003762:	1961      	adds	r1, r4, r5
 8003764:	428b      	cmp	r3, r1
 8003766:	bf04      	itt	eq
 8003768:	6819      	ldreq	r1, [r3, #0]
 800376a:	685b      	ldreq	r3, [r3, #4]
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	bf04      	itt	eq
 8003770:	1949      	addeq	r1, r1, r5
 8003772:	6021      	streq	r1, [r4, #0]
 8003774:	6054      	str	r4, [r2, #4]
 8003776:	e7ca      	b.n	800370e <_free_r+0x26>
 8003778:	b003      	add	sp, #12
 800377a:	bd30      	pop	{r4, r5, pc}
 800377c:	20000354 	.word	0x20000354

08003780 <sbrk_aligned>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	4e0e      	ldr	r6, [pc, #56]	; (80037bc <sbrk_aligned+0x3c>)
 8003784:	460c      	mov	r4, r1
 8003786:	6831      	ldr	r1, [r6, #0]
 8003788:	4605      	mov	r5, r0
 800378a:	b911      	cbnz	r1, 8003792 <sbrk_aligned+0x12>
 800378c:	f000 f88c 	bl	80038a8 <_sbrk_r>
 8003790:	6030      	str	r0, [r6, #0]
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f887 	bl	80038a8 <_sbrk_r>
 800379a:	1c43      	adds	r3, r0, #1
 800379c:	d00a      	beq.n	80037b4 <sbrk_aligned+0x34>
 800379e:	1cc4      	adds	r4, r0, #3
 80037a0:	f024 0403 	bic.w	r4, r4, #3
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d007      	beq.n	80037b8 <sbrk_aligned+0x38>
 80037a8:	1a21      	subs	r1, r4, r0
 80037aa:	4628      	mov	r0, r5
 80037ac:	f000 f87c 	bl	80038a8 <_sbrk_r>
 80037b0:	3001      	adds	r0, #1
 80037b2:	d101      	bne.n	80037b8 <sbrk_aligned+0x38>
 80037b4:	f04f 34ff 	mov.w	r4, #4294967295
 80037b8:	4620      	mov	r0, r4
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	20000358 	.word	0x20000358

080037c0 <_malloc_r>:
 80037c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c4:	1ccd      	adds	r5, r1, #3
 80037c6:	f025 0503 	bic.w	r5, r5, #3
 80037ca:	3508      	adds	r5, #8
 80037cc:	2d0c      	cmp	r5, #12
 80037ce:	bf38      	it	cc
 80037d0:	250c      	movcc	r5, #12
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	4607      	mov	r7, r0
 80037d6:	db01      	blt.n	80037dc <_malloc_r+0x1c>
 80037d8:	42a9      	cmp	r1, r5
 80037da:	d905      	bls.n	80037e8 <_malloc_r+0x28>
 80037dc:	230c      	movs	r3, #12
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	2600      	movs	r6, #0
 80037e2:	4630      	mov	r0, r6
 80037e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e8:	4e2e      	ldr	r6, [pc, #184]	; (80038a4 <_malloc_r+0xe4>)
 80037ea:	f000 f949 	bl	8003a80 <__malloc_lock>
 80037ee:	6833      	ldr	r3, [r6, #0]
 80037f0:	461c      	mov	r4, r3
 80037f2:	bb34      	cbnz	r4, 8003842 <_malloc_r+0x82>
 80037f4:	4629      	mov	r1, r5
 80037f6:	4638      	mov	r0, r7
 80037f8:	f7ff ffc2 	bl	8003780 <sbrk_aligned>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	4604      	mov	r4, r0
 8003800:	d14d      	bne.n	800389e <_malloc_r+0xde>
 8003802:	6834      	ldr	r4, [r6, #0]
 8003804:	4626      	mov	r6, r4
 8003806:	2e00      	cmp	r6, #0
 8003808:	d140      	bne.n	800388c <_malloc_r+0xcc>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	4631      	mov	r1, r6
 800380e:	4638      	mov	r0, r7
 8003810:	eb04 0803 	add.w	r8, r4, r3
 8003814:	f000 f848 	bl	80038a8 <_sbrk_r>
 8003818:	4580      	cmp	r8, r0
 800381a:	d13a      	bne.n	8003892 <_malloc_r+0xd2>
 800381c:	6821      	ldr	r1, [r4, #0]
 800381e:	3503      	adds	r5, #3
 8003820:	1a6d      	subs	r5, r5, r1
 8003822:	f025 0503 	bic.w	r5, r5, #3
 8003826:	3508      	adds	r5, #8
 8003828:	2d0c      	cmp	r5, #12
 800382a:	bf38      	it	cc
 800382c:	250c      	movcc	r5, #12
 800382e:	4629      	mov	r1, r5
 8003830:	4638      	mov	r0, r7
 8003832:	f7ff ffa5 	bl	8003780 <sbrk_aligned>
 8003836:	3001      	adds	r0, #1
 8003838:	d02b      	beq.n	8003892 <_malloc_r+0xd2>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	442b      	add	r3, r5
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	e00e      	b.n	8003860 <_malloc_r+0xa0>
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	1b52      	subs	r2, r2, r5
 8003846:	d41e      	bmi.n	8003886 <_malloc_r+0xc6>
 8003848:	2a0b      	cmp	r2, #11
 800384a:	d916      	bls.n	800387a <_malloc_r+0xba>
 800384c:	1961      	adds	r1, r4, r5
 800384e:	42a3      	cmp	r3, r4
 8003850:	6025      	str	r5, [r4, #0]
 8003852:	bf18      	it	ne
 8003854:	6059      	strne	r1, [r3, #4]
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	bf08      	it	eq
 800385a:	6031      	streq	r1, [r6, #0]
 800385c:	5162      	str	r2, [r4, r5]
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	4638      	mov	r0, r7
 8003862:	f104 060b 	add.w	r6, r4, #11
 8003866:	f000 f911 	bl	8003a8c <__malloc_unlock>
 800386a:	f026 0607 	bic.w	r6, r6, #7
 800386e:	1d23      	adds	r3, r4, #4
 8003870:	1af2      	subs	r2, r6, r3
 8003872:	d0b6      	beq.n	80037e2 <_malloc_r+0x22>
 8003874:	1b9b      	subs	r3, r3, r6
 8003876:	50a3      	str	r3, [r4, r2]
 8003878:	e7b3      	b.n	80037e2 <_malloc_r+0x22>
 800387a:	6862      	ldr	r2, [r4, #4]
 800387c:	42a3      	cmp	r3, r4
 800387e:	bf0c      	ite	eq
 8003880:	6032      	streq	r2, [r6, #0]
 8003882:	605a      	strne	r2, [r3, #4]
 8003884:	e7ec      	b.n	8003860 <_malloc_r+0xa0>
 8003886:	4623      	mov	r3, r4
 8003888:	6864      	ldr	r4, [r4, #4]
 800388a:	e7b2      	b.n	80037f2 <_malloc_r+0x32>
 800388c:	4634      	mov	r4, r6
 800388e:	6876      	ldr	r6, [r6, #4]
 8003890:	e7b9      	b.n	8003806 <_malloc_r+0x46>
 8003892:	230c      	movs	r3, #12
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4638      	mov	r0, r7
 8003898:	f000 f8f8 	bl	8003a8c <__malloc_unlock>
 800389c:	e7a1      	b.n	80037e2 <_malloc_r+0x22>
 800389e:	6025      	str	r5, [r4, #0]
 80038a0:	e7de      	b.n	8003860 <_malloc_r+0xa0>
 80038a2:	bf00      	nop
 80038a4:	20000354 	.word	0x20000354

080038a8 <_sbrk_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d06      	ldr	r5, [pc, #24]	; (80038c4 <_sbrk_r+0x1c>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	f7fd fcf4 	bl	80012a0 <_sbrk>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_sbrk_r+0x1a>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_sbrk_r+0x1a>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	2000035c 	.word	0x2000035c

080038c8 <sniprintf>:
 80038c8:	b40c      	push	{r2, r3}
 80038ca:	b530      	push	{r4, r5, lr}
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <sniprintf+0x64>)
 80038ce:	1e0c      	subs	r4, r1, #0
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	b09d      	sub	sp, #116	; 0x74
 80038d4:	da08      	bge.n	80038e8 <sniprintf+0x20>
 80038d6:	238b      	movs	r3, #139	; 0x8b
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	f04f 30ff 	mov.w	r0, #4294967295
 80038de:	b01d      	add	sp, #116	; 0x74
 80038e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038e4:	b002      	add	sp, #8
 80038e6:	4770      	bx	lr
 80038e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80038ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038f0:	bf14      	ite	ne
 80038f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038f6:	4623      	moveq	r3, r4
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	9307      	str	r3, [sp, #28]
 80038fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003900:	9002      	str	r0, [sp, #8]
 8003902:	9006      	str	r0, [sp, #24]
 8003904:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003908:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800390a:	ab21      	add	r3, sp, #132	; 0x84
 800390c:	a902      	add	r1, sp, #8
 800390e:	4628      	mov	r0, r5
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	f000 f91d 	bl	8003b50 <_svfiprintf_r>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	bfbc      	itt	lt
 800391a:	238b      	movlt	r3, #139	; 0x8b
 800391c:	602b      	strlt	r3, [r5, #0]
 800391e:	2c00      	cmp	r4, #0
 8003920:	d0dd      	beq.n	80038de <sniprintf+0x16>
 8003922:	9b02      	ldr	r3, [sp, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e7d9      	b.n	80038de <sniprintf+0x16>
 800392a:	bf00      	nop
 800392c:	200000a8 	.word	0x200000a8

08003930 <siprintf>:
 8003930:	b40e      	push	{r1, r2, r3}
 8003932:	b500      	push	{lr}
 8003934:	b09c      	sub	sp, #112	; 0x70
 8003936:	ab1d      	add	r3, sp, #116	; 0x74
 8003938:	9002      	str	r0, [sp, #8]
 800393a:	9006      	str	r0, [sp, #24]
 800393c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003940:	4809      	ldr	r0, [pc, #36]	; (8003968 <siprintf+0x38>)
 8003942:	9107      	str	r1, [sp, #28]
 8003944:	9104      	str	r1, [sp, #16]
 8003946:	4909      	ldr	r1, [pc, #36]	; (800396c <siprintf+0x3c>)
 8003948:	f853 2b04 	ldr.w	r2, [r3], #4
 800394c:	9105      	str	r1, [sp, #20]
 800394e:	6800      	ldr	r0, [r0, #0]
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	a902      	add	r1, sp, #8
 8003954:	f000 f8fc 	bl	8003b50 <_svfiprintf_r>
 8003958:	9b02      	ldr	r3, [sp, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	b01c      	add	sp, #112	; 0x70
 8003960:	f85d eb04 	ldr.w	lr, [sp], #4
 8003964:	b003      	add	sp, #12
 8003966:	4770      	bx	lr
 8003968:	200000a8 	.word	0x200000a8
 800396c:	ffff0208 	.word	0xffff0208

08003970 <strnlen>:
 8003970:	b510      	push	{r4, lr}
 8003972:	4602      	mov	r2, r0
 8003974:	4401      	add	r1, r0
 8003976:	428a      	cmp	r2, r1
 8003978:	4613      	mov	r3, r2
 800397a:	d003      	beq.n	8003984 <strnlen+0x14>
 800397c:	781c      	ldrb	r4, [r3, #0]
 800397e:	3201      	adds	r2, #1
 8003980:	2c00      	cmp	r4, #0
 8003982:	d1f8      	bne.n	8003976 <strnlen+0x6>
 8003984:	1a18      	subs	r0, r3, r0
 8003986:	bd10      	pop	{r4, pc}

08003988 <_strtoul_l.constprop.0>:
 8003988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800398c:	4f36      	ldr	r7, [pc, #216]	; (8003a68 <_strtoul_l.constprop.0+0xe0>)
 800398e:	4686      	mov	lr, r0
 8003990:	460d      	mov	r5, r1
 8003992:	4628      	mov	r0, r5
 8003994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003998:	5de6      	ldrb	r6, [r4, r7]
 800399a:	f016 0608 	ands.w	r6, r6, #8
 800399e:	d1f8      	bne.n	8003992 <_strtoul_l.constprop.0+0xa>
 80039a0:	2c2d      	cmp	r4, #45	; 0x2d
 80039a2:	d12f      	bne.n	8003a04 <_strtoul_l.constprop.0+0x7c>
 80039a4:	782c      	ldrb	r4, [r5, #0]
 80039a6:	2601      	movs	r6, #1
 80039a8:	1c85      	adds	r5, r0, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d057      	beq.n	8003a5e <_strtoul_l.constprop.0+0xd6>
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d109      	bne.n	80039c6 <_strtoul_l.constprop.0+0x3e>
 80039b2:	2c30      	cmp	r4, #48	; 0x30
 80039b4:	d107      	bne.n	80039c6 <_strtoul_l.constprop.0+0x3e>
 80039b6:	7828      	ldrb	r0, [r5, #0]
 80039b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80039bc:	2858      	cmp	r0, #88	; 0x58
 80039be:	d149      	bne.n	8003a54 <_strtoul_l.constprop.0+0xcc>
 80039c0:	786c      	ldrb	r4, [r5, #1]
 80039c2:	2310      	movs	r3, #16
 80039c4:	3502      	adds	r5, #2
 80039c6:	f04f 38ff 	mov.w	r8, #4294967295
 80039ca:	2700      	movs	r7, #0
 80039cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80039d0:	fb03 f908 	mul.w	r9, r3, r8
 80039d4:	ea6f 0909 	mvn.w	r9, r9
 80039d8:	4638      	mov	r0, r7
 80039da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80039de:	f1bc 0f09 	cmp.w	ip, #9
 80039e2:	d814      	bhi.n	8003a0e <_strtoul_l.constprop.0+0x86>
 80039e4:	4664      	mov	r4, ip
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	dd22      	ble.n	8003a30 <_strtoul_l.constprop.0+0xa8>
 80039ea:	2f00      	cmp	r7, #0
 80039ec:	db1d      	blt.n	8003a2a <_strtoul_l.constprop.0+0xa2>
 80039ee:	4580      	cmp	r8, r0
 80039f0:	d31b      	bcc.n	8003a2a <_strtoul_l.constprop.0+0xa2>
 80039f2:	d101      	bne.n	80039f8 <_strtoul_l.constprop.0+0x70>
 80039f4:	45a1      	cmp	r9, r4
 80039f6:	db18      	blt.n	8003a2a <_strtoul_l.constprop.0+0xa2>
 80039f8:	fb00 4003 	mla	r0, r0, r3, r4
 80039fc:	2701      	movs	r7, #1
 80039fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a02:	e7ea      	b.n	80039da <_strtoul_l.constprop.0+0x52>
 8003a04:	2c2b      	cmp	r4, #43	; 0x2b
 8003a06:	bf04      	itt	eq
 8003a08:	782c      	ldrbeq	r4, [r5, #0]
 8003a0a:	1c85      	addeq	r5, r0, #2
 8003a0c:	e7cd      	b.n	80039aa <_strtoul_l.constprop.0+0x22>
 8003a0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003a12:	f1bc 0f19 	cmp.w	ip, #25
 8003a16:	d801      	bhi.n	8003a1c <_strtoul_l.constprop.0+0x94>
 8003a18:	3c37      	subs	r4, #55	; 0x37
 8003a1a:	e7e4      	b.n	80039e6 <_strtoul_l.constprop.0+0x5e>
 8003a1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003a20:	f1bc 0f19 	cmp.w	ip, #25
 8003a24:	d804      	bhi.n	8003a30 <_strtoul_l.constprop.0+0xa8>
 8003a26:	3c57      	subs	r4, #87	; 0x57
 8003a28:	e7dd      	b.n	80039e6 <_strtoul_l.constprop.0+0x5e>
 8003a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8003a2e:	e7e6      	b.n	80039fe <_strtoul_l.constprop.0+0x76>
 8003a30:	2f00      	cmp	r7, #0
 8003a32:	da07      	bge.n	8003a44 <_strtoul_l.constprop.0+0xbc>
 8003a34:	2322      	movs	r3, #34	; 0x22
 8003a36:	f8ce 3000 	str.w	r3, [lr]
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3e:	b932      	cbnz	r2, 8003a4e <_strtoul_l.constprop.0+0xc6>
 8003a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a44:	b106      	cbz	r6, 8003a48 <_strtoul_l.constprop.0+0xc0>
 8003a46:	4240      	negs	r0, r0
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d0f9      	beq.n	8003a40 <_strtoul_l.constprop.0+0xb8>
 8003a4c:	b107      	cbz	r7, 8003a50 <_strtoul_l.constprop.0+0xc8>
 8003a4e:	1e69      	subs	r1, r5, #1
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	e7f5      	b.n	8003a40 <_strtoul_l.constprop.0+0xb8>
 8003a54:	2430      	movs	r4, #48	; 0x30
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1b5      	bne.n	80039c6 <_strtoul_l.constprop.0+0x3e>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e7b3      	b.n	80039c6 <_strtoul_l.constprop.0+0x3e>
 8003a5e:	2c30      	cmp	r4, #48	; 0x30
 8003a60:	d0a9      	beq.n	80039b6 <_strtoul_l.constprop.0+0x2e>
 8003a62:	230a      	movs	r3, #10
 8003a64:	e7af      	b.n	80039c6 <_strtoul_l.constprop.0+0x3e>
 8003a66:	bf00      	nop
 8003a68:	080044e1 	.word	0x080044e1

08003a6c <strtoul>:
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	460a      	mov	r2, r1
 8003a70:	4601      	mov	r1, r0
 8003a72:	4802      	ldr	r0, [pc, #8]	; (8003a7c <strtoul+0x10>)
 8003a74:	6800      	ldr	r0, [r0, #0]
 8003a76:	f7ff bf87 	b.w	8003988 <_strtoul_l.constprop.0>
 8003a7a:	bf00      	nop
 8003a7c:	200000a8 	.word	0x200000a8

08003a80 <__malloc_lock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__malloc_lock+0x8>)
 8003a82:	f000 baf9 	b.w	8004078 <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000360 	.word	0x20000360

08003a8c <__malloc_unlock>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__malloc_unlock+0x8>)
 8003a8e:	f000 baf4 	b.w	800407a <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	20000360 	.word	0x20000360

08003a98 <__ssputs_r>:
 8003a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	688e      	ldr	r6, [r1, #8]
 8003a9e:	429e      	cmp	r6, r3
 8003aa0:	4682      	mov	sl, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	4690      	mov	r8, r2
 8003aa6:	461f      	mov	r7, r3
 8003aa8:	d838      	bhi.n	8003b1c <__ssputs_r+0x84>
 8003aaa:	898a      	ldrh	r2, [r1, #12]
 8003aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ab0:	d032      	beq.n	8003b18 <__ssputs_r+0x80>
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	6909      	ldr	r1, [r1, #16]
 8003ab6:	eba5 0901 	sub.w	r9, r5, r1
 8003aba:	6965      	ldr	r5, [r4, #20]
 8003abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	444b      	add	r3, r9
 8003ac8:	106d      	asrs	r5, r5, #1
 8003aca:	429d      	cmp	r5, r3
 8003acc:	bf38      	it	cc
 8003ace:	461d      	movcc	r5, r3
 8003ad0:	0553      	lsls	r3, r2, #21
 8003ad2:	d531      	bpl.n	8003b38 <__ssputs_r+0xa0>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7ff fe73 	bl	80037c0 <_malloc_r>
 8003ada:	4606      	mov	r6, r0
 8003adc:	b950      	cbnz	r0, 8003af4 <__ssputs_r+0x5c>
 8003ade:	230c      	movs	r3, #12
 8003ae0:	f8ca 3000 	str.w	r3, [sl]
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af4:	6921      	ldr	r1, [r4, #16]
 8003af6:	464a      	mov	r2, r9
 8003af8:	f000 fac0 	bl	800407c <memcpy>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	6126      	str	r6, [r4, #16]
 8003b0a:	6165      	str	r5, [r4, #20]
 8003b0c:	444e      	add	r6, r9
 8003b0e:	eba5 0509 	sub.w	r5, r5, r9
 8003b12:	6026      	str	r6, [r4, #0]
 8003b14:	60a5      	str	r5, [r4, #8]
 8003b16:	463e      	mov	r6, r7
 8003b18:	42be      	cmp	r6, r7
 8003b1a:	d900      	bls.n	8003b1e <__ssputs_r+0x86>
 8003b1c:	463e      	mov	r6, r7
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	4632      	mov	r2, r6
 8003b22:	4641      	mov	r1, r8
 8003b24:	f000 fab8 	bl	8004098 <memmove>
 8003b28:	68a3      	ldr	r3, [r4, #8]
 8003b2a:	1b9b      	subs	r3, r3, r6
 8003b2c:	60a3      	str	r3, [r4, #8]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	4433      	add	r3, r6
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	2000      	movs	r0, #0
 8003b36:	e7db      	b.n	8003af0 <__ssputs_r+0x58>
 8003b38:	462a      	mov	r2, r5
 8003b3a:	f000 fac7 	bl	80040cc <_realloc_r>
 8003b3e:	4606      	mov	r6, r0
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d1e1      	bne.n	8003b08 <__ssputs_r+0x70>
 8003b44:	6921      	ldr	r1, [r4, #16]
 8003b46:	4650      	mov	r0, sl
 8003b48:	f7ff fdce 	bl	80036e8 <_free_r>
 8003b4c:	e7c7      	b.n	8003ade <__ssputs_r+0x46>
	...

08003b50 <_svfiprintf_r>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	4698      	mov	r8, r3
 8003b56:	898b      	ldrh	r3, [r1, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	b09d      	sub	sp, #116	; 0x74
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	4614      	mov	r4, r2
 8003b62:	d50e      	bpl.n	8003b82 <_svfiprintf_r+0x32>
 8003b64:	690b      	ldr	r3, [r1, #16]
 8003b66:	b963      	cbnz	r3, 8003b82 <_svfiprintf_r+0x32>
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	f7ff fe29 	bl	80037c0 <_malloc_r>
 8003b6e:	6028      	str	r0, [r5, #0]
 8003b70:	6128      	str	r0, [r5, #16]
 8003b72:	b920      	cbnz	r0, 8003b7e <_svfiprintf_r+0x2e>
 8003b74:	230c      	movs	r3, #12
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	e0d1      	b.n	8003d22 <_svfiprintf_r+0x1d2>
 8003b7e:	2340      	movs	r3, #64	; 0x40
 8003b80:	616b      	str	r3, [r5, #20]
 8003b82:	2300      	movs	r3, #0
 8003b84:	9309      	str	r3, [sp, #36]	; 0x24
 8003b86:	2320      	movs	r3, #32
 8003b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b90:	2330      	movs	r3, #48	; 0x30
 8003b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d3c <_svfiprintf_r+0x1ec>
 8003b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b9a:	f04f 0901 	mov.w	r9, #1
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ba6:	b10a      	cbz	r2, 8003bac <_svfiprintf_r+0x5c>
 8003ba8:	2a25      	cmp	r2, #37	; 0x25
 8003baa:	d1f9      	bne.n	8003ba0 <_svfiprintf_r+0x50>
 8003bac:	ebba 0b04 	subs.w	fp, sl, r4
 8003bb0:	d00b      	beq.n	8003bca <_svfiprintf_r+0x7a>
 8003bb2:	465b      	mov	r3, fp
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	4638      	mov	r0, r7
 8003bba:	f7ff ff6d 	bl	8003a98 <__ssputs_r>
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f000 80aa 	beq.w	8003d18 <_svfiprintf_r+0x1c8>
 8003bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bc6:	445a      	add	r2, fp
 8003bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8003bca:	f89a 3000 	ldrb.w	r3, [sl]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80a2 	beq.w	8003d18 <_svfiprintf_r+0x1c8>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bde:	f10a 0a01 	add.w	sl, sl, #1
 8003be2:	9304      	str	r3, [sp, #16]
 8003be4:	9307      	str	r3, [sp, #28]
 8003be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bea:	931a      	str	r3, [sp, #104]	; 0x68
 8003bec:	4654      	mov	r4, sl
 8003bee:	2205      	movs	r2, #5
 8003bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf4:	4851      	ldr	r0, [pc, #324]	; (8003d3c <_svfiprintf_r+0x1ec>)
 8003bf6:	f7fc faf3 	bl	80001e0 <memchr>
 8003bfa:	9a04      	ldr	r2, [sp, #16]
 8003bfc:	b9d8      	cbnz	r0, 8003c36 <_svfiprintf_r+0xe6>
 8003bfe:	06d0      	lsls	r0, r2, #27
 8003c00:	bf44      	itt	mi
 8003c02:	2320      	movmi	r3, #32
 8003c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c08:	0711      	lsls	r1, r2, #28
 8003c0a:	bf44      	itt	mi
 8003c0c:	232b      	movmi	r3, #43	; 0x2b
 8003c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c12:	f89a 3000 	ldrb.w	r3, [sl]
 8003c16:	2b2a      	cmp	r3, #42	; 0x2a
 8003c18:	d015      	beq.n	8003c46 <_svfiprintf_r+0xf6>
 8003c1a:	9a07      	ldr	r2, [sp, #28]
 8003c1c:	4654      	mov	r4, sl
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f04f 0c0a 	mov.w	ip, #10
 8003c24:	4621      	mov	r1, r4
 8003c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c2a:	3b30      	subs	r3, #48	; 0x30
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	d94e      	bls.n	8003cce <_svfiprintf_r+0x17e>
 8003c30:	b1b0      	cbz	r0, 8003c60 <_svfiprintf_r+0x110>
 8003c32:	9207      	str	r2, [sp, #28]
 8003c34:	e014      	b.n	8003c60 <_svfiprintf_r+0x110>
 8003c36:	eba0 0308 	sub.w	r3, r0, r8
 8003c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	9304      	str	r3, [sp, #16]
 8003c42:	46a2      	mov	sl, r4
 8003c44:	e7d2      	b.n	8003bec <_svfiprintf_r+0x9c>
 8003c46:	9b03      	ldr	r3, [sp, #12]
 8003c48:	1d19      	adds	r1, r3, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	9103      	str	r1, [sp, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bfbb      	ittet	lt
 8003c52:	425b      	neglt	r3, r3
 8003c54:	f042 0202 	orrlt.w	r2, r2, #2
 8003c58:	9307      	strge	r3, [sp, #28]
 8003c5a:	9307      	strlt	r3, [sp, #28]
 8003c5c:	bfb8      	it	lt
 8003c5e:	9204      	strlt	r2, [sp, #16]
 8003c60:	7823      	ldrb	r3, [r4, #0]
 8003c62:	2b2e      	cmp	r3, #46	; 0x2e
 8003c64:	d10c      	bne.n	8003c80 <_svfiprintf_r+0x130>
 8003c66:	7863      	ldrb	r3, [r4, #1]
 8003c68:	2b2a      	cmp	r3, #42	; 0x2a
 8003c6a:	d135      	bne.n	8003cd8 <_svfiprintf_r+0x188>
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	9203      	str	r2, [sp, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bfb8      	it	lt
 8003c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c7c:	3402      	adds	r4, #2
 8003c7e:	9305      	str	r3, [sp, #20]
 8003c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d4c <_svfiprintf_r+0x1fc>
 8003c84:	7821      	ldrb	r1, [r4, #0]
 8003c86:	2203      	movs	r2, #3
 8003c88:	4650      	mov	r0, sl
 8003c8a:	f7fc faa9 	bl	80001e0 <memchr>
 8003c8e:	b140      	cbz	r0, 8003ca2 <_svfiprintf_r+0x152>
 8003c90:	2340      	movs	r3, #64	; 0x40
 8003c92:	eba0 000a 	sub.w	r0, r0, sl
 8003c96:	fa03 f000 	lsl.w	r0, r3, r0
 8003c9a:	9b04      	ldr	r3, [sp, #16]
 8003c9c:	4303      	orrs	r3, r0
 8003c9e:	3401      	adds	r4, #1
 8003ca0:	9304      	str	r3, [sp, #16]
 8003ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca6:	4826      	ldr	r0, [pc, #152]	; (8003d40 <_svfiprintf_r+0x1f0>)
 8003ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cac:	2206      	movs	r2, #6
 8003cae:	f7fc fa97 	bl	80001e0 <memchr>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d038      	beq.n	8003d28 <_svfiprintf_r+0x1d8>
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <_svfiprintf_r+0x1f4>)
 8003cb8:	bb1b      	cbnz	r3, 8003d02 <_svfiprintf_r+0x1b2>
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	3307      	adds	r3, #7
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	9303      	str	r3, [sp, #12]
 8003cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc8:	4433      	add	r3, r6
 8003cca:	9309      	str	r3, [sp, #36]	; 0x24
 8003ccc:	e767      	b.n	8003b9e <_svfiprintf_r+0x4e>
 8003cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	e7a5      	b.n	8003c24 <_svfiprintf_r+0xd4>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	3401      	adds	r4, #1
 8003cdc:	9305      	str	r3, [sp, #20]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f04f 0c0a 	mov.w	ip, #10
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cea:	3a30      	subs	r2, #48	; 0x30
 8003cec:	2a09      	cmp	r2, #9
 8003cee:	d903      	bls.n	8003cf8 <_svfiprintf_r+0x1a8>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0c5      	beq.n	8003c80 <_svfiprintf_r+0x130>
 8003cf4:	9105      	str	r1, [sp, #20]
 8003cf6:	e7c3      	b.n	8003c80 <_svfiprintf_r+0x130>
 8003cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e7f0      	b.n	8003ce4 <_svfiprintf_r+0x194>
 8003d02:	ab03      	add	r3, sp, #12
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	462a      	mov	r2, r5
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <_svfiprintf_r+0x1f8>)
 8003d0a:	a904      	add	r1, sp, #16
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f3af 8000 	nop.w
 8003d12:	1c42      	adds	r2, r0, #1
 8003d14:	4606      	mov	r6, r0
 8003d16:	d1d6      	bne.n	8003cc6 <_svfiprintf_r+0x176>
 8003d18:	89ab      	ldrh	r3, [r5, #12]
 8003d1a:	065b      	lsls	r3, r3, #25
 8003d1c:	f53f af2c 	bmi.w	8003b78 <_svfiprintf_r+0x28>
 8003d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d22:	b01d      	add	sp, #116	; 0x74
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d28:	ab03      	add	r3, sp, #12
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	462a      	mov	r2, r5
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <_svfiprintf_r+0x1f8>)
 8003d30:	a904      	add	r1, sp, #16
 8003d32:	4638      	mov	r0, r7
 8003d34:	f000 f87a 	bl	8003e2c <_printf_i>
 8003d38:	e7eb      	b.n	8003d12 <_svfiprintf_r+0x1c2>
 8003d3a:	bf00      	nop
 8003d3c:	080045e1 	.word	0x080045e1
 8003d40:	080045eb 	.word	0x080045eb
 8003d44:	00000000 	.word	0x00000000
 8003d48:	08003a99 	.word	0x08003a99
 8003d4c:	080045e7 	.word	0x080045e7

08003d50 <_printf_common>:
 8003d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	4616      	mov	r6, r2
 8003d56:	4699      	mov	r9, r3
 8003d58:	688a      	ldr	r2, [r1, #8]
 8003d5a:	690b      	ldr	r3, [r1, #16]
 8003d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	bfb8      	it	lt
 8003d64:	4613      	movlt	r3, r2
 8003d66:	6033      	str	r3, [r6, #0]
 8003d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d6c:	4607      	mov	r7, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	b10a      	cbz	r2, 8003d76 <_printf_common+0x26>
 8003d72:	3301      	adds	r3, #1
 8003d74:	6033      	str	r3, [r6, #0]
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	0699      	lsls	r1, r3, #26
 8003d7a:	bf42      	ittt	mi
 8003d7c:	6833      	ldrmi	r3, [r6, #0]
 8003d7e:	3302      	addmi	r3, #2
 8003d80:	6033      	strmi	r3, [r6, #0]
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	f015 0506 	ands.w	r5, r5, #6
 8003d88:	d106      	bne.n	8003d98 <_printf_common+0x48>
 8003d8a:	f104 0a19 	add.w	sl, r4, #25
 8003d8e:	68e3      	ldr	r3, [r4, #12]
 8003d90:	6832      	ldr	r2, [r6, #0]
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	42ab      	cmp	r3, r5
 8003d96:	dc26      	bgt.n	8003de6 <_printf_common+0x96>
 8003d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d9c:	1e13      	subs	r3, r2, #0
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	bf18      	it	ne
 8003da2:	2301      	movne	r3, #1
 8003da4:	0692      	lsls	r2, r2, #26
 8003da6:	d42b      	bmi.n	8003e00 <_printf_common+0xb0>
 8003da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dac:	4649      	mov	r1, r9
 8003dae:	4638      	mov	r0, r7
 8003db0:	47c0      	blx	r8
 8003db2:	3001      	adds	r0, #1
 8003db4:	d01e      	beq.n	8003df4 <_printf_common+0xa4>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	68e5      	ldr	r5, [r4, #12]
 8003dba:	6832      	ldr	r2, [r6, #0]
 8003dbc:	f003 0306 	and.w	r3, r3, #6
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	bf08      	it	eq
 8003dc4:	1aad      	subeq	r5, r5, r2
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	6922      	ldr	r2, [r4, #16]
 8003dca:	bf0c      	ite	eq
 8003dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd0:	2500      	movne	r5, #0
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	bfc4      	itt	gt
 8003dd6:	1a9b      	subgt	r3, r3, r2
 8003dd8:	18ed      	addgt	r5, r5, r3
 8003dda:	2600      	movs	r6, #0
 8003ddc:	341a      	adds	r4, #26
 8003dde:	42b5      	cmp	r5, r6
 8003de0:	d11a      	bne.n	8003e18 <_printf_common+0xc8>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e008      	b.n	8003df8 <_printf_common+0xa8>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4652      	mov	r2, sl
 8003dea:	4649      	mov	r1, r9
 8003dec:	4638      	mov	r0, r7
 8003dee:	47c0      	blx	r8
 8003df0:	3001      	adds	r0, #1
 8003df2:	d103      	bne.n	8003dfc <_printf_common+0xac>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	e7c6      	b.n	8003d8e <_printf_common+0x3e>
 8003e00:	18e1      	adds	r1, r4, r3
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	2030      	movs	r0, #48	; 0x30
 8003e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e0a:	4422      	add	r2, r4
 8003e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e14:	3302      	adds	r3, #2
 8003e16:	e7c7      	b.n	8003da8 <_printf_common+0x58>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	4638      	mov	r0, r7
 8003e20:	47c0      	blx	r8
 8003e22:	3001      	adds	r0, #1
 8003e24:	d0e6      	beq.n	8003df4 <_printf_common+0xa4>
 8003e26:	3601      	adds	r6, #1
 8003e28:	e7d9      	b.n	8003dde <_printf_common+0x8e>
	...

08003e2c <_printf_i>:
 8003e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	7e0f      	ldrb	r7, [r1, #24]
 8003e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e34:	2f78      	cmp	r7, #120	; 0x78
 8003e36:	4691      	mov	r9, r2
 8003e38:	4680      	mov	r8, r0
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	469a      	mov	sl, r3
 8003e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e42:	d807      	bhi.n	8003e54 <_printf_i+0x28>
 8003e44:	2f62      	cmp	r7, #98	; 0x62
 8003e46:	d80a      	bhi.n	8003e5e <_printf_i+0x32>
 8003e48:	2f00      	cmp	r7, #0
 8003e4a:	f000 80d8 	beq.w	8003ffe <_printf_i+0x1d2>
 8003e4e:	2f58      	cmp	r7, #88	; 0x58
 8003e50:	f000 80a3 	beq.w	8003f9a <_printf_i+0x16e>
 8003e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e5c:	e03a      	b.n	8003ed4 <_printf_i+0xa8>
 8003e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e62:	2b15      	cmp	r3, #21
 8003e64:	d8f6      	bhi.n	8003e54 <_printf_i+0x28>
 8003e66:	a101      	add	r1, pc, #4	; (adr r1, 8003e6c <_printf_i+0x40>)
 8003e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e6c:	08003ec5 	.word	0x08003ec5
 8003e70:	08003ed9 	.word	0x08003ed9
 8003e74:	08003e55 	.word	0x08003e55
 8003e78:	08003e55 	.word	0x08003e55
 8003e7c:	08003e55 	.word	0x08003e55
 8003e80:	08003e55 	.word	0x08003e55
 8003e84:	08003ed9 	.word	0x08003ed9
 8003e88:	08003e55 	.word	0x08003e55
 8003e8c:	08003e55 	.word	0x08003e55
 8003e90:	08003e55 	.word	0x08003e55
 8003e94:	08003e55 	.word	0x08003e55
 8003e98:	08003fe5 	.word	0x08003fe5
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003fc7 	.word	0x08003fc7
 8003ea4:	08003e55 	.word	0x08003e55
 8003ea8:	08003e55 	.word	0x08003e55
 8003eac:	08004007 	.word	0x08004007
 8003eb0:	08003e55 	.word	0x08003e55
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003e55 	.word	0x08003e55
 8003ebc:	08003e55 	.word	0x08003e55
 8003ec0:	08003fcf 	.word	0x08003fcf
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	1d1a      	adds	r2, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	602a      	str	r2, [r5, #0]
 8003ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0a3      	b.n	8004020 <_printf_i+0x1f4>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	6829      	ldr	r1, [r5, #0]
 8003edc:	0606      	lsls	r6, r0, #24
 8003ede:	f101 0304 	add.w	r3, r1, #4
 8003ee2:	d50a      	bpl.n	8003efa <_printf_i+0xce>
 8003ee4:	680e      	ldr	r6, [r1, #0]
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	da03      	bge.n	8003ef4 <_printf_i+0xc8>
 8003eec:	232d      	movs	r3, #45	; 0x2d
 8003eee:	4276      	negs	r6, r6
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef4:	485e      	ldr	r0, [pc, #376]	; (8004070 <_printf_i+0x244>)
 8003ef6:	230a      	movs	r3, #10
 8003ef8:	e019      	b.n	8003f2e <_printf_i+0x102>
 8003efa:	680e      	ldr	r6, [r1, #0]
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f02:	bf18      	it	ne
 8003f04:	b236      	sxthne	r6, r6
 8003f06:	e7ef      	b.n	8003ee8 <_printf_i+0xbc>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	6820      	ldr	r0, [r4, #0]
 8003f0c:	1d19      	adds	r1, r3, #4
 8003f0e:	6029      	str	r1, [r5, #0]
 8003f10:	0601      	lsls	r1, r0, #24
 8003f12:	d501      	bpl.n	8003f18 <_printf_i+0xec>
 8003f14:	681e      	ldr	r6, [r3, #0]
 8003f16:	e002      	b.n	8003f1e <_printf_i+0xf2>
 8003f18:	0646      	lsls	r6, r0, #25
 8003f1a:	d5fb      	bpl.n	8003f14 <_printf_i+0xe8>
 8003f1c:	881e      	ldrh	r6, [r3, #0]
 8003f1e:	4854      	ldr	r0, [pc, #336]	; (8004070 <_printf_i+0x244>)
 8003f20:	2f6f      	cmp	r7, #111	; 0x6f
 8003f22:	bf0c      	ite	eq
 8003f24:	2308      	moveq	r3, #8
 8003f26:	230a      	movne	r3, #10
 8003f28:	2100      	movs	r1, #0
 8003f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f2e:	6865      	ldr	r5, [r4, #4]
 8003f30:	60a5      	str	r5, [r4, #8]
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	bfa2      	ittt	ge
 8003f36:	6821      	ldrge	r1, [r4, #0]
 8003f38:	f021 0104 	bicge.w	r1, r1, #4
 8003f3c:	6021      	strge	r1, [r4, #0]
 8003f3e:	b90e      	cbnz	r6, 8003f44 <_printf_i+0x118>
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	d04d      	beq.n	8003fe0 <_printf_i+0x1b4>
 8003f44:	4615      	mov	r5, r2
 8003f46:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f4a:	fb03 6711 	mls	r7, r3, r1, r6
 8003f4e:	5dc7      	ldrb	r7, [r0, r7]
 8003f50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f54:	4637      	mov	r7, r6
 8003f56:	42bb      	cmp	r3, r7
 8003f58:	460e      	mov	r6, r1
 8003f5a:	d9f4      	bls.n	8003f46 <_printf_i+0x11a>
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d10b      	bne.n	8003f78 <_printf_i+0x14c>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	07de      	lsls	r6, r3, #31
 8003f64:	d508      	bpl.n	8003f78 <_printf_i+0x14c>
 8003f66:	6923      	ldr	r3, [r4, #16]
 8003f68:	6861      	ldr	r1, [r4, #4]
 8003f6a:	4299      	cmp	r1, r3
 8003f6c:	bfde      	ittt	le
 8003f6e:	2330      	movle	r3, #48	; 0x30
 8003f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f78:	1b52      	subs	r2, r2, r5
 8003f7a:	6122      	str	r2, [r4, #16]
 8003f7c:	f8cd a000 	str.w	sl, [sp]
 8003f80:	464b      	mov	r3, r9
 8003f82:	aa03      	add	r2, sp, #12
 8003f84:	4621      	mov	r1, r4
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7ff fee2 	bl	8003d50 <_printf_common>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d14c      	bne.n	800402a <_printf_i+0x1fe>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	b004      	add	sp, #16
 8003f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9a:	4835      	ldr	r0, [pc, #212]	; (8004070 <_printf_i+0x244>)
 8003f9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fa0:	6829      	ldr	r1, [r5, #0]
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fa8:	6029      	str	r1, [r5, #0]
 8003faa:	061d      	lsls	r5, r3, #24
 8003fac:	d514      	bpl.n	8003fd8 <_printf_i+0x1ac>
 8003fae:	07df      	lsls	r7, r3, #31
 8003fb0:	bf44      	itt	mi
 8003fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb6:	6023      	strmi	r3, [r4, #0]
 8003fb8:	b91e      	cbnz	r6, 8003fc2 <_printf_i+0x196>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	f023 0320 	bic.w	r3, r3, #32
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	e7b0      	b.n	8003f28 <_printf_i+0xfc>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	f043 0320 	orr.w	r3, r3, #32
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	2378      	movs	r3, #120	; 0x78
 8003fd0:	4828      	ldr	r0, [pc, #160]	; (8004074 <_printf_i+0x248>)
 8003fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fd6:	e7e3      	b.n	8003fa0 <_printf_i+0x174>
 8003fd8:	0659      	lsls	r1, r3, #25
 8003fda:	bf48      	it	mi
 8003fdc:	b2b6      	uxthmi	r6, r6
 8003fde:	e7e6      	b.n	8003fae <_printf_i+0x182>
 8003fe0:	4615      	mov	r5, r2
 8003fe2:	e7bb      	b.n	8003f5c <_printf_i+0x130>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	6826      	ldr	r6, [r4, #0]
 8003fe8:	6961      	ldr	r1, [r4, #20]
 8003fea:	1d18      	adds	r0, r3, #4
 8003fec:	6028      	str	r0, [r5, #0]
 8003fee:	0635      	lsls	r5, r6, #24
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	d501      	bpl.n	8003ff8 <_printf_i+0x1cc>
 8003ff4:	6019      	str	r1, [r3, #0]
 8003ff6:	e002      	b.n	8003ffe <_printf_i+0x1d2>
 8003ff8:	0670      	lsls	r0, r6, #25
 8003ffa:	d5fb      	bpl.n	8003ff4 <_printf_i+0x1c8>
 8003ffc:	8019      	strh	r1, [r3, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	6123      	str	r3, [r4, #16]
 8004002:	4615      	mov	r5, r2
 8004004:	e7ba      	b.n	8003f7c <_printf_i+0x150>
 8004006:	682b      	ldr	r3, [r5, #0]
 8004008:	1d1a      	adds	r2, r3, #4
 800400a:	602a      	str	r2, [r5, #0]
 800400c:	681d      	ldr	r5, [r3, #0]
 800400e:	6862      	ldr	r2, [r4, #4]
 8004010:	2100      	movs	r1, #0
 8004012:	4628      	mov	r0, r5
 8004014:	f7fc f8e4 	bl	80001e0 <memchr>
 8004018:	b108      	cbz	r0, 800401e <_printf_i+0x1f2>
 800401a:	1b40      	subs	r0, r0, r5
 800401c:	6060      	str	r0, [r4, #4]
 800401e:	6863      	ldr	r3, [r4, #4]
 8004020:	6123      	str	r3, [r4, #16]
 8004022:	2300      	movs	r3, #0
 8004024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004028:	e7a8      	b.n	8003f7c <_printf_i+0x150>
 800402a:	6923      	ldr	r3, [r4, #16]
 800402c:	462a      	mov	r2, r5
 800402e:	4649      	mov	r1, r9
 8004030:	4640      	mov	r0, r8
 8004032:	47d0      	blx	sl
 8004034:	3001      	adds	r0, #1
 8004036:	d0ab      	beq.n	8003f90 <_printf_i+0x164>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	079b      	lsls	r3, r3, #30
 800403c:	d413      	bmi.n	8004066 <_printf_i+0x23a>
 800403e:	68e0      	ldr	r0, [r4, #12]
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	4298      	cmp	r0, r3
 8004044:	bfb8      	it	lt
 8004046:	4618      	movlt	r0, r3
 8004048:	e7a4      	b.n	8003f94 <_printf_i+0x168>
 800404a:	2301      	movs	r3, #1
 800404c:	4632      	mov	r2, r6
 800404e:	4649      	mov	r1, r9
 8004050:	4640      	mov	r0, r8
 8004052:	47d0      	blx	sl
 8004054:	3001      	adds	r0, #1
 8004056:	d09b      	beq.n	8003f90 <_printf_i+0x164>
 8004058:	3501      	adds	r5, #1
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	9903      	ldr	r1, [sp, #12]
 800405e:	1a5b      	subs	r3, r3, r1
 8004060:	42ab      	cmp	r3, r5
 8004062:	dcf2      	bgt.n	800404a <_printf_i+0x21e>
 8004064:	e7eb      	b.n	800403e <_printf_i+0x212>
 8004066:	2500      	movs	r5, #0
 8004068:	f104 0619 	add.w	r6, r4, #25
 800406c:	e7f5      	b.n	800405a <_printf_i+0x22e>
 800406e:	bf00      	nop
 8004070:	080045f2 	.word	0x080045f2
 8004074:	08004603 	.word	0x08004603

08004078 <__retarget_lock_acquire_recursive>:
 8004078:	4770      	bx	lr

0800407a <__retarget_lock_release_recursive>:
 800407a:	4770      	bx	lr

0800407c <memcpy>:
 800407c:	440a      	add	r2, r1
 800407e:	4291      	cmp	r1, r2
 8004080:	f100 33ff 	add.w	r3, r0, #4294967295
 8004084:	d100      	bne.n	8004088 <memcpy+0xc>
 8004086:	4770      	bx	lr
 8004088:	b510      	push	{r4, lr}
 800408a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800408e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004092:	4291      	cmp	r1, r2
 8004094:	d1f9      	bne.n	800408a <memcpy+0xe>
 8004096:	bd10      	pop	{r4, pc}

08004098 <memmove>:
 8004098:	4288      	cmp	r0, r1
 800409a:	b510      	push	{r4, lr}
 800409c:	eb01 0402 	add.w	r4, r1, r2
 80040a0:	d902      	bls.n	80040a8 <memmove+0x10>
 80040a2:	4284      	cmp	r4, r0
 80040a4:	4623      	mov	r3, r4
 80040a6:	d807      	bhi.n	80040b8 <memmove+0x20>
 80040a8:	1e43      	subs	r3, r0, #1
 80040aa:	42a1      	cmp	r1, r4
 80040ac:	d008      	beq.n	80040c0 <memmove+0x28>
 80040ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040b6:	e7f8      	b.n	80040aa <memmove+0x12>
 80040b8:	4402      	add	r2, r0
 80040ba:	4601      	mov	r1, r0
 80040bc:	428a      	cmp	r2, r1
 80040be:	d100      	bne.n	80040c2 <memmove+0x2a>
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ca:	e7f7      	b.n	80040bc <memmove+0x24>

080040cc <_realloc_r>:
 80040cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d0:	4680      	mov	r8, r0
 80040d2:	4614      	mov	r4, r2
 80040d4:	460e      	mov	r6, r1
 80040d6:	b921      	cbnz	r1, 80040e2 <_realloc_r+0x16>
 80040d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040dc:	4611      	mov	r1, r2
 80040de:	f7ff bb6f 	b.w	80037c0 <_malloc_r>
 80040e2:	b92a      	cbnz	r2, 80040f0 <_realloc_r+0x24>
 80040e4:	f7ff fb00 	bl	80036e8 <_free_r>
 80040e8:	4625      	mov	r5, r4
 80040ea:	4628      	mov	r0, r5
 80040ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f0:	f000 f81b 	bl	800412a <_malloc_usable_size_r>
 80040f4:	4284      	cmp	r4, r0
 80040f6:	4607      	mov	r7, r0
 80040f8:	d802      	bhi.n	8004100 <_realloc_r+0x34>
 80040fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040fe:	d812      	bhi.n	8004126 <_realloc_r+0x5a>
 8004100:	4621      	mov	r1, r4
 8004102:	4640      	mov	r0, r8
 8004104:	f7ff fb5c 	bl	80037c0 <_malloc_r>
 8004108:	4605      	mov	r5, r0
 800410a:	2800      	cmp	r0, #0
 800410c:	d0ed      	beq.n	80040ea <_realloc_r+0x1e>
 800410e:	42bc      	cmp	r4, r7
 8004110:	4622      	mov	r2, r4
 8004112:	4631      	mov	r1, r6
 8004114:	bf28      	it	cs
 8004116:	463a      	movcs	r2, r7
 8004118:	f7ff ffb0 	bl	800407c <memcpy>
 800411c:	4631      	mov	r1, r6
 800411e:	4640      	mov	r0, r8
 8004120:	f7ff fae2 	bl	80036e8 <_free_r>
 8004124:	e7e1      	b.n	80040ea <_realloc_r+0x1e>
 8004126:	4635      	mov	r5, r6
 8004128:	e7df      	b.n	80040ea <_realloc_r+0x1e>

0800412a <_malloc_usable_size_r>:
 800412a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800412e:	1f18      	subs	r0, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	bfbc      	itt	lt
 8004134:	580b      	ldrlt	r3, [r1, r0]
 8004136:	18c0      	addlt	r0, r0, r3
 8004138:	4770      	bx	lr
	...

0800413c <_init>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr

08004148 <_fini>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr
